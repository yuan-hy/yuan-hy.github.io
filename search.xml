<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 参考</title>
      <link href="/2022/09/19/redis-reference/"/>
      <url>/2022/09/19/redis-reference/</url>
      
        <content type="html"><![CDATA[<h2 id="ARM-支持"><a href="#ARM-支持" class="headerlink" title="ARM 支持"></a>ARM 支持</h2><ul><li>Redis 4.0 及以上版本一般支持 ARM 处理器，特别是 Raspberry Pi(树莓派) 作为主要平台</li><li>官方认为 Redis 非常适合物联网和嵌入式设备，原因如下：<ul><li><strong>Redis 的内存占用和 CPU 要求非常小</strong>。它可以在 Raspberry Pi Zero 等小型设备中运行，而不会影响整体性能，使用少量内存，同时为许多用例提供良好的性能。</li><li><strong>Redis 的数据结构通常是对物联网/嵌入式用例进行建模的理想方式</strong>。一些示例包括累积时间序列数据、接收或排队命令以执行或响应以发送回远程服务器等等。 </li><li><strong>Redis 中的数据建模对于为必须快速响应或远程服务器离线的设备做出设备内决策非常有用</strong> </li><li><strong>Redis 可以用作设备中运行的进程之间的通信系统</strong> </li><li><strong>Redis 的仅附加文件存储非常适合 SSD 卡</strong> </li><li><strong>Redis 5.0 及更高版本中包含的流数据结构是专门为时间序列应用程序设计的，内存开销非常低</strong></li></ul></li></ul><h2 id="Redis-接受客户端连接"><a href="#Redis-接受客户端连接" class="headerlink" title="Redis 接受客户端连接"></a>Redis 接受客户端连接</h2><ul><li><p>当接受新的客户端连接时，将执行以下操作： </p><ul><li>由于 Redis 使用多路复用和非阻塞 I/O，因此<strong>客户端套接字处于非阻塞状态</strong>。 </li><li>设置该 TCP_NODELAY 选项是为了确保<strong>连接没有延迟</strong>。 </li><li><strong>创建一个可读文件事件</strong>，以便 Redis 能够在新数据可在套接字上读取时立即收集客户端查询</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis strings 类型教程</title>
      <link href="/2022/09/14/redis-strings/"/>
      <url>/2022/09/14/redis-strings/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-strings"><a href="#Redis-strings" class="headerlink" title="Redis strings"></a>Redis strings</h1><blockquote><p>思路：通过记录 strings 的各个命令的含义以及用例来了解各个命令的用法</p></blockquote><h2 id="strings-包含以下命令"><a href="#strings-包含以下命令" class="headerlink" title="strings 包含以下命令"></a>strings 包含以下命令</h2><ul><li>通过 help @string 查看 string 字符串包含的所有命令的语法与命令描述，可以看出根据命令的字母顺序排序输出</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli <span class="token function">help</span> @string   APPEND key value  summary: Append a value to a key  since: 2.0.0  DECR key  summary: Decrement the integer value of a key by one  since: 1.0.0    <span class="token punctuation">..</span>.  SUBSTR key start end  summary: Get a substring of the string stored at a key  since: 1.0.0</code></pre><ul><li>因此根据以上可以列出字符串的所有命令<ul><li><code>APPEND</code></li><li><code>DECR</code></li><li><code>DECRBY</code></li><li><code>GET</code></li><li><code>GETDEL</code></li><li><code>GETEX</code></li><li><code>GETRANGE</code></li><li><code>GETSET</code></li><li><code>INCR</code></li><li><code>INCRBY</code></li><li><code>INCRBYFLOAT</code></li><li><code>LCS</code></li><li><code>MGET</code></li><li><code>MSET</code></li><li><code>MSETNX</code></li><li><code>PSETEX</code></li><li><code>SET</code></li><li><code>SETEX</code></li><li><code>SETNX</code></li><li><code>SETRANGE</code></li><li><code>STRLEN</code></li><li><code>SUBSTR</code></li></ul></li></ul><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>因为在记录 string 的命令时可能会用到以下还没介绍的命令，所以在这里预先记录一下</p><h3 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a><code>EXISTS</code></h3><ul><li>语法：EXISTS key [key …] ,支持对多个 key 检查</li><li>时间复杂度：O(N), N 表示要检查的 key 的数量，例如<pre class=" language-bash"><code class="language-bash">$ EXISTS key1,key2,key3,key4,key5,key6  这个时间复杂度为 O<span class="token punctuation">(</span>6<span class="token punctuation">)</span> </code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 正常情况，当判断某一个 key 是否存在时，会根据具体情况返回整数，这个整数表示实际存在的 key 的数量</span><span class="token comment" spellcheck="true"># key 不存在时返回 0</span>127.0.0.1:6379<span class="token operator">></span> exists key<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0  127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key <span class="token string">"hello"</span>OK<span class="token comment" spellcheck="true"># key 存在时，返回 1</span>127.0.0.1:6379<span class="token operator">></span> exists key<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key2 <span class="token string">"world"</span>OK<span class="token comment" spellcheck="true"># 当 key 为不同的并且存在的键时，返回的是实际存在的键数量</span>127.0.0.1:6379<span class="token operator">></span> exists key key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2  <span class="token comment" spellcheck="true"># 如果 key 存在且相同，也作为计算键的数量,两个相同的存在的 key ,返回值为 2</span>127.0.0.1:6379<span class="token operator">></span> exists key key<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2  <span class="token comment" spellcheck="true"># 当 key3 不存在时，是不作为计算返回的，这里 key3 不存在，key key2 存在，所以只返回 2</span>127.0.0.1:6379<span class="token operator">></span> exists key key2 key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2</code></pre></li></ul><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a><code>TTL</code></h3><ul><li><p>语法：TTL key </p></li><li><p>时间复杂度：O(1)</p></li><li><p>描述：获取某个 key 存活剩余的时间，单位为秒</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在 Redis 2.6 或更早版本， ttl key , 如果 key 不存在或者 key 存在，但是没有设置关联过期时间，返回 -1</span>  <span class="token comment" spellcheck="true"># 而从 Redis 2.8 开始</span><span class="token comment" spellcheck="true"># key 不存在，返回 -2</span><span class="token comment" spellcheck="true"># key 存在，但是没有设置关联过期时间，返回 -1</span>  <span class="token comment" spellcheck="true"># 与 pttl 命令类似，只不过 pttl 命令返回值单位为毫秒</span>    127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> expirekey <span class="token string">"hello"</span> <span class="token comment" spellcheck="true"># 创建 expirekey 的键</span>OK127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1 <span class="token comment" spellcheck="true"># expirekey 存在，但是不关联过期时间，使用 ttl 命令返回 -1</span>127.0.0.1:6379<span class="token operator">></span> expire expirekey 10 <span class="token comment" spellcheck="true"># 给 expirekey 键关联存活时间</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl expirekey <span class="token comment" spellcheck="true"># 每次执行返回的都是剩余的存活时间</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl expirekey <span class="token comment" spellcheck="true"># 当 key 存活时间过期，expirekey 自动被删除，expirekey 不存在则返回 -2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> get expirekey <span class="token comment" spellcheck="true"># 当 key 的存活时间超时再去获取时， key 已经不存在了，返回 nil</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre></li></ul><h2 id="每个命令的用法"><a href="#每个命令的用法" class="headerlink" title="每个命令的用法"></a>每个命令的用法</h2><h3 id="APPEND"><a href="#APPEND" class="headerlink" title="APPEND"></a><code>APPEND</code></h3><ul><li>语法：<code>APPEND key value</code></li><li>描述：给某个 key 追加 value 值</li><li>时间复杂度：O(1)</li><li><a href="https://redis.io/commands/append/">参考官方 append 命令</a><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 当 key 不存在时，使用 append 命令给某个 key 追加值时，会先创建该 key ,赋予空字符串，然后相当于 set 命令，给创建的 key 设值</span>127.0.0.1:6379<span class="token operator">></span> exists mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> append mykey <span class="token string">"value"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5 <span class="token comment" spellcheck="true"># append 命令的返回值表示追加操作后的字符串长度。</span>127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token string">"value"</span>  <span class="token comment" spellcheck="true"># 当 mykey 这个键存在值后，append 时，会将值追加到当前值的后面</span>127.0.0.1:6379<span class="token operator">></span> append mykey <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10 <span class="token comment" spellcheck="true"># append 命令的返回值表示追加操作后的字符串长度。上面 value 的长度为 5，追加长度为 5 的 hello 后，返回 10</span>127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token string">"valuehello"</span>  <span class="token comment" spellcheck="true"># 可以作为时间序列使用，大概意思就是每次追加的这个值的长度是固定长度的</span><span class="token comment" spellcheck="true"># 语法：APPEND timeseries "fixed-size sample"</span><span class="token comment" spellcheck="true"># 访问时间序列中的单个元素并不难：</span>  <span class="token comment" spellcheck="true"># STRLEN可用于获取样本数。</span>  <span class="token comment" spellcheck="true"># GETRANGE允许随机访问元素。GETRANGE如果我们的时间序列有相关的时间信息，我们可以很容易地结合Redis 2.6 中可用的 Lua 脚本引擎实现二进制搜索来获取范围。</span>  <span class="token comment" spellcheck="true"># SETRANGE可用于覆盖现有的时间序列。</span>   <span class="token comment" spellcheck="true"># 使用固定大小的字符串对传感器温度进行采样的示例（在实际实现中使用二进制格式更好）</span>127.0.0.1:6379<span class="token operator">></span> APPEND ts <span class="token string">"0043"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> APPEND ts <span class="token string">"0035"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8127.0.0.1:6379<span class="token operator">></span> GETRANGE ts 0 3<span class="token string">"0043"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE ts 4 7<span class="token string">"0035"</span></code></pre></li></ul><h3 id="DECR"><a href="#DECR" class="headerlink" title="DECR"></a><code>DECR</code></h3><ul><li><p>语法：<code>DECR key</code></p></li><li><p>描述：某个 key 对应的 value 值为整数，DECR key 表示给存储在某个 key 的整数值减 1</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/decr/">参考官方 decr 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># decr 命令返回值为减 1 之后的整数值，如 下面的返回值 9 = 10 - 1</span>127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"10"</span><span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span> DECR mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9<span class="token comment" spellcheck="true"># 当 decr 操作的 key 不存在时，在操作减 1 之前，会将这个 key 设置为 0 ，再执行减 1 操作</span>127.0.0.1:6379<span class="token operator">></span> exists dec<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> decr dec<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1127.0.0.1:6379<span class="token operator">></span> decr dec<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> exists dec <span class="token comment" spellcheck="true"># 此时 dec 这个 key 在设置为 0 时已被创建</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true"># key 对应的 value 值范围是：64 位的有符号整数，即 -2^63~2^63-1</span>127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"234293482390480948029348230948"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> decr mykey<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range <span class="token comment" spellcheck="true"># 超过了限制长度范围，报错了</span><span class="token comment" spellcheck="true"># 当 key 对应的值不为整数或者超出限制范围，都会报如下错误</span>127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> decr key<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range  127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> flag <span class="token boolean">true</span>OK127.0.0.1:6379<span class="token operator">></span> decr flag<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range</code></pre></li></ul><h3 id="DECRBY"><a href="#DECRBY" class="headerlink" title="DECRBY"></a><code>DECRBY</code></h3><ul><li><p>语法：<code>DECRBY key decrement</code></p></li><li><p>描述：某个 key 对应的 value 值为整数，DECRBY key decrement 表示给存储在某个 key 的整数值减去给定的 decrement ，返回操作后的值</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/decrby/">参考官方 decrby 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># decrby 命令返回值为减去指定数字值 之后的整数值，如下面的返回值 6 = 10 - 4</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> mykey 10OK127.0.0.1:6379<span class="token operator">></span> decrby mykey 4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6<span class="token comment" spellcheck="true"># 当 decrby 操作的 key 不存在时，在操作减 之前，会将这个 key 设置为 0 ，再执行减 4 操作</span>127.0.0.1:6379<span class="token operator">></span> getdel dec<span class="token string">"-2"</span>127.0.0.1:6379<span class="token operator">></span> exists dec<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> decrby dec 4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -4127.0.0.1:6379<span class="token operator">></span> exists dec <span class="token comment" spellcheck="true"># 此时 dec 这个 key 在设置为 0 时已被创建</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true"># key 对应的 value 值范围是：64 位的有符号整数，即 -2^63~2^63-1</span>127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"234293482390480948029348230948"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> decrby mykey 4<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range <span class="token comment" spellcheck="true"># 超过了限制长度范围，报错了</span><span class="token comment" spellcheck="true"># 当 key 对应的值不为整数或者超出限制范围，都会报如下错误</span>127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> decrby key 4<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range  127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> flag <span class="token boolean">true</span>OK127.0.0.1:6379<span class="token operator">></span> decrby flag 4<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range</code></pre></li></ul><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a><code>GET</code></h3><ul><li><p>语法：<code>GET key</code></p></li><li><p>描述：获取某个 key 的 value 值</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/get/">参考官方 get 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># get 命令返回 key 的字符串值</span>127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"hello"</span>  <span class="token comment" spellcheck="true"># 当 key 不存在时，返回 nil</span>127.0.0.1:6379<span class="token operator">></span> get nonexisting<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># get 只处理 string 的值</span></code></pre></li></ul><h3 id="GETDEL"><a href="#GETDEL" class="headerlink" title="GETDEL"></a><code>GETDEL</code></h3><ul><li><p>语法：<code>GETDEL key</code></p></li><li><p>描述：获取返回 key 的值并删除这个 key,与 get 用法类似，只是返回值时同时删除 key</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/getdel/">参考官方 getdel 命令</a></p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> mykey <span class="token string">"hello"</span>OK<span class="token comment" spellcheck="true"># 获取返回 key 的值并删除 mykey</span>127.0.0.1:6379<span class="token operator">></span> getdel mykey<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> getdel mykey<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 当 key 不存在时，返回 nil</span>127.0.0.1:6379<span class="token operator">></span> getdel nonexisting<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># getdel 只处理 string 的值</span></code></pre></li></ul><h3 id="GETEX"><a href="#GETEX" class="headerlink" title="GETEX"></a><code>GETEX</code></h3><ul><li><p>语法：<code>GETEX key [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|PERSIST]</code></p></li><li><p>描述：获取返回 key 的值,如果使用选项，则可以给这个 key 设置过期时间</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/getex/">参考官方 getex 命令</a></p></li><li><p>额外选项</p><ul><li>EX seconds ：设置指定的过期时间，以秒为单位</li><li>PX milliseconds ：设置指定的过期时间，以毫秒为单位</li><li>EXAT unix-time-seconds ：设置密钥过期的指定 Unix 时间，以秒为单位</li><li>PXAT unix-time-milliseconds ：设置密钥过期的指定 Unix 时间，以毫秒为单位。</li><li>PERSIST ：删除与密钥关联的生存时间。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> expirekey <span class="token string">"hello"</span>OK<span class="token comment" spellcheck="true"># 仅仅只是获取时间，并没有设置关联过期时间</span>127.0.0.1:6379<span class="token operator">></span> getex expirekey<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1<span class="token comment" spellcheck="true"># 获取时间，并设置关联过期时间</span>127.0.0.1:6379<span class="token operator">></span> getex expirekey ex 10<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2  <span class="token comment" spellcheck="true"># 通过 persist 选项删除关联的过期时间</span>127.0.0.1:6379<span class="token operator">></span> getex expirekey ex 100<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 93127.0.0.1:6379<span class="token operator">></span> getex expirekey persist<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> ttl expirekey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1</code></pre></li></ul><h3 id="GETRANGE"><a href="#GETRANGE" class="headerlink" title="GETRANGE"></a><code>GETRANGE</code></h3><ul><li>语法：<code>GETRANGE key start end</code></li><li>描述：获取存储在一个键中的字符串的子串</li><li>时间复杂度：O(N)，N 表示截取返回字符串的长度，但小字符串的复杂度认为是 O(1)</li><li><a href="https://redis.io/commands/getrange/">参考官方 getrange 命令</a></li><li>额外选项<ul><li>start ：截取起始位置(包含在内)</li><li>end ：截取结束位置(包含在内)</li><li>支持负数偏移量，例如 -1 表示字符串最后一个字符的位置，-2 表示倒数第二位，-3 即倒数第三位</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"This is a string"</span><span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE mykey 0 3<span class="token string">"This"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE mykey -3 -1 <span class="token comment" spellcheck="true"># 截取从倒数第三位到倒数第一位</span><span class="token string">"ing"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE mykey 0 -1<span class="token string">"This is a string"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE mykey 10 100<span class="token string">"string"</span></code></pre></li></ul><h3 id="GETSET"><a href="#GETSET" class="headerlink" title="GETSET"></a><code>GETSET</code></h3><ul><li>Redis 6.2.0 版本废弃了，使用 set 与 get 操作替代</li><li>语法：<code>GETSET key value</code></li><li>描述：给 key 设置新值，返回旧值</li></ul><h3 id="INCR"><a href="#INCR" class="headerlink" title="INCR"></a><code>INCR</code></h3><ul><li><p>语法：<code>INCR key</code></p></li><li><p>描述：某个 key 对应的 value 值为整数，INCR key 表示给存储在某个 key 的整数值加 1</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/incr/">参考官方 incr 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># incr 命令返回值为加 1 之后的整数值，如 下面的返回值 11 = 10 + 1</span>127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"10"</span><span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span> incr mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token comment" spellcheck="true"># 当 incr 操作的 key 不存在时，在操作加 1 之前，会将这个 key 设置为 0 ，再执行加 1 操作</span>127.0.0.1:6379<span class="token operator">></span> exists inc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> incr inc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> incr inc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> exists inc <span class="token comment" spellcheck="true"># 此时 inc 这个 key 在设置为 0 时已被创建</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true"># key 对应的 value 值范围是：64 位的有符号整数，即 -2^63~2^63-1</span>127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"234293482390480948029348230948"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> incr mykey<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range <span class="token comment" spellcheck="true"># 超过了限制长度范围，报错了</span><span class="token comment" spellcheck="true"># 当 key 对应的值不为整数或者超出限制范围，都会报如下错误</span>127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> incr key<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range  127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> flag <span class="token boolean">true</span>OK127.0.0.1:6379<span class="token operator">></span> incr flag<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range</code></pre></li></ul><h3 id="INCRBY"><a href="#INCRBY" class="headerlink" title="INCRBY"></a><code>INCRBY</code></h3><ul><li><p>语法：<code>INCRBY key increment</code></p></li><li><p>描述：某个 key 对应的 value 值为整数，INCRBY key decrement 表示给存储在某个 key 的整数值减去给定的 decrement ，返回操作后的值</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/incrby/">参考官方 incrby 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># incrby 命令返回值为加上指定数字值 increment 之后的整数值，如下面的返回值 14 = 10 + 4</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> mykey 10OK127.0.0.1:6379<span class="token operator">></span> incrby mykey 4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 14<span class="token comment" spellcheck="true"># 当 incrby 操作的 key 不存在时，在操作加之前，会将这个 key 设置为 0 ，再执行加 4 操作</span>127.0.0.1:6379<span class="token operator">></span> getdel inc<span class="token string">"-2"</span>127.0.0.1:6379<span class="token operator">></span> exists inc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> incrby inc 4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> exists inc <span class="token comment" spellcheck="true"># 此时 inc 这个 key 在设置为 0 时已被创建</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1  <span class="token comment" spellcheck="true"># key 对应的 value 值范围是：64 位的有符号整数，即 -2^63~2^63-1</span>127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"234293482390480948029348230948"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> incrby mykey 4<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range <span class="token comment" spellcheck="true"># 超过了限制长度范围，报错了</span><span class="token comment" spellcheck="true"># 当 key 对应的值不为整数或者超出限制范围，都会报如下错误</span>127.0.0.1:6379<span class="token operator">></span> get key<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> incrby key 4<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range  127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> flag <span class="token boolean">true</span>OK127.0.0.1:6379<span class="token operator">></span> incrby flag 4<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range</code></pre></li></ul><h3 id="INCRBYFLOAT"><a href="#INCRBYFLOAT" class="headerlink" title="INCRBYFLOAT"></a><code>INCRBYFLOAT</code></h3><ul><li><p>语法：<code>INCRBYFLOAT key increment</code></p></li><li><p>描述：INCRBYFLOAT key increment 表示给存储在某个 key 的数值(支持浮点数)加 increment(支持浮点数)，返回增加 increment 后的值</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/incrbyfloat/">参考官方 incrbyfloat 命令</a></p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"10"</span>OK127.0.0.1:6379<span class="token operator">></span> incrbyfloat mykey 1 <span class="token comment" spellcheck="true"># 可以增加正整数</span><span class="token string">"11"</span>127.0.0.1:6379<span class="token operator">></span> incrbyfloat mykey 0.5 <span class="token comment" spellcheck="true"># 可以加浮点数(小数)</span><span class="token string">"11.5"</span>127.0.0.1:6379<span class="token operator">></span> incrbyfloat mykey -1 <span class="token comment" spellcheck="true"># 可以加负数，就是减法</span><span class="token string">"10.5"</span>127.0.0.1:6379<span class="token operator">></span> exists noexistskey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> incrbyfloat noexistskey -1 <span class="token comment" spellcheck="true"># 不存在时先设置为 0 ，后再执行操作，-1 表示减 1</span><span class="token string">"-1"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> mykey 5.0e3 <span class="token comment" spellcheck="true"># 支持为指数</span>OK127.0.0.1:6379<span class="token operator">></span> incrbyfloat mykey 2.0e2 <span class="token comment" spellcheck="true"># 支持为指数</span><span class="token string">"5200"</span> </code></pre></li></ul><h3 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a><code>LCS</code></h3><ul><li><p>语法：<code>LCS key1 key2 [LEN] [IDX] [MINMATCHLEN len] [WITHMATCHLEN]</code></p></li><li><p>描述：找出两个字符串最长的公共子串</p></li><li><p>时间复杂度：O(N*M) N 和 M 分别是 key1 和 key2 字符串的长度</p></li><li><p><a href="https://redis.io/commands/incrbyfloat/">参考官方 incrbyfloat 命令</a></p></li><li><p>大意就是从左到右匹配子序列，将选出公共的子序列，可以不连续</p></li><li><p>参数</p><ul><li>len 长度，匹配输出最长的公共子序列</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不加参数选项匹配</span>127.0.0.1:6379<span class="token operator">></span> MSET key1 ohmytext key2 mynewtextOK127.0.0.1:6379<span class="token operator">></span> lcs key1 key2<span class="token string">"mytext"</span><span class="token comment" spellcheck="true"># 127.0.0.1:6379> lcs key1 key2 len</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> lcs key1 key2 idx1<span class="token punctuation">)</span> <span class="token string">"matches"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4         2<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7      2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5         2<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8   2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2         2<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3      2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0         2<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 13<span class="token punctuation">)</span> <span class="token string">"len"</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6</code></pre></li></ul><h3 id="MGET"><a href="#MGET" class="headerlink" title="MGET"></a><code>MGET</code></h3><ul><li>语法：<code>MGET key [key ...]</code></li><li>描述：获取所有给定的 key 的值，支持多个 key ,key 之间空格隔开</li><li>时间复杂度：O(N) ，其中 N 是要检索的键的数量</li><li><a href="https://redis.io/commands/mget/">参考官方 mget 命令</a><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 返回所有指定检索 key 的值，如果该 key 不存在或者不持有 string 值，则返回 nil ,这个操作永远不会失败 </span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 <span class="token string">"hello"</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key2 <span class="token string">"world"</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key3 <span class="token string">""</span>OK127.0.0.1:6379<span class="token operator">></span> mget key1 key2 key3 noexistkey1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">""</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre></li></ul><h3 id="MSET"><a href="#MSET" class="headerlink" title="MSET"></a><code>MSET</code></h3><ul><li><p>语法：<code>MSET key value [key value ...]</code></p></li><li><p>描述：批量给指定的 key 设值，格式为 key value 为一组</p></li><li><p>时间复杂度：O(N) ，其中 N 是要设置的 key 的数量</p></li><li><p><a href="https://redis.io/commands/mset/">参考官方 mset 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># MSET 命令会使用新值覆盖旧值，原子操作，与 set 命令效果一样。如果不想覆盖旧值，可以考虑 MSETNX  </span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 <span class="token string">"hello"</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key2 <span class="token string">"world"</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key3 <span class="token string">""</span>OK127.0.0.1:6379<span class="token operator">></span> mset key1 <span class="token string">"hellomset"</span> key2 <span class="token string">"worldset"</span>OK127.0.0.1:6379<span class="token operator">></span> mget key1 key2 key3 noexistkey1<span class="token punctuation">)</span> <span class="token string">"hellomset"</span>2<span class="token punctuation">)</span> <span class="token string">"worldset"</span>3<span class="token punctuation">)</span> <span class="token string">""</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># key1 ,key2 存在值，使用 msetnx 命令设置值时，返回 0</span>127.0.0.1:6379<span class="token operator">></span> msetnx key1 <span class="token string">"hello"</span> key2 <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> mget key1 key2 key3 noexistkey <span class="token comment" spellcheck="true"># 获取 key1,key2 的值不变，表示没有设值成功</span>1<span class="token punctuation">)</span> <span class="token string">"hellomset"</span>2<span class="token punctuation">)</span> <span class="token string">"worldset"</span>3<span class="token punctuation">)</span> <span class="token string">""</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># key4 不存在，使用 msetnx 命令设置值时，返回 1</span>127.0.0.1:6379<span class="token operator">></span> msetnx key4 <span class="token string">"msetnx"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> mget key1 key2 key3 noexistkey key4 <span class="token comment" spellcheck="true"># 获取 key4 ，设值成功</span>1<span class="token punctuation">)</span> <span class="token string">"hellomset"</span>2<span class="token punctuation">)</span> <span class="token string">"worldset"</span>3<span class="token punctuation">)</span> <span class="token string">""</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>5<span class="token punctuation">)</span> <span class="token string">"msetnx"</span></code></pre></li></ul><h3 id="MSETNX"><a href="#MSETNX" class="headerlink" title="MSETNX"></a><code>MSETNX</code></h3><ul><li><p>语法：<code>MSETNX key value [key value ...]</code></p></li><li><p>描述：批量给指定的 key 设值，格式为 key value 为一组，只有 key 不存在才成功,即使只有其中一个 key 存在值，所有的都不会设置成功</p></li><li><p>时间复杂度：O(N) ，其中 N 是要设置的 key 的数量</p></li><li><p><a href="https://redis.io/commands/msetnx/">参考官方 msetnx 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># MSETNX 命令不会使用新值覆盖旧值  </span><span class="token comment" spellcheck="true"># key1 ,key2 存在值，使用 msetnx 命令设置值时，即使有一个 key 有值，都是不会设置成功的，返回 0</span>127.0.0.1:6379<span class="token operator">></span> msetnx key1 <span class="token string">"hello"</span> key2 <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> mget key1 key2 key3 noexistkey <span class="token comment" spellcheck="true"># 获取 key1,key2 的值不变，表示没有设值成功</span>1<span class="token punctuation">)</span> <span class="token string">"hellomset"</span>2<span class="token punctuation">)</span> <span class="token string">"worldset"</span>3<span class="token punctuation">)</span> <span class="token string">""</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># key4 不存在，使用 msetnx 命令设置值时，所有 key 设置成功返回 1</span>127.0.0.1:6379<span class="token operator">></span> msetnx key4 <span class="token string">"msetnx"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> mget key1 key2 key3 noexistkey key4 <span class="token comment" spellcheck="true"># 获取 key4 ，设值成功</span>1<span class="token punctuation">)</span> <span class="token string">"hellomset"</span>2<span class="token punctuation">)</span> <span class="token string">"worldset"</span>3<span class="token punctuation">)</span> <span class="token string">""</span>4<span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>5<span class="token punctuation">)</span> <span class="token string">"msetnx"</span></code></pre><h3 id="PSETEX"><a href="#PSETEX" class="headerlink" title="PSETEX"></a><code>PSETEX</code></h3></li><li><p>语法：<code>PSETEX key milliseconds value</code></p></li><li><p>描述：给某个 key 设置过期时间和值，过期时间的单位为 <code>毫秒</code></p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/psetex/">参考官方 psetex 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 工作原理与 setex 唯一区别就是 psetex 的过期时间单位是毫秒而不是秒</span><span class="token comment" spellcheck="true"># key1 ,key2 存在值，使用 msetnx 命令设置值时，即使有一个 key 有值，都是不会设置成功的，返回 0</span>127.0.0.1:6379<span class="token operator">></span> PSETEX mykey 10000 <span class="token string">"Hello"</span><span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span> PTTL mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7682127.0.0.1:6379<span class="token operator">></span> GET mykey<span class="token string">"Hello"</span><span class="token comment" spellcheck="true"># 过期时间到了，mykey 不存在了，获取值为 nil ,通过 pttl 查看返回 -2</span>127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> pttl mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2</code></pre></li></ul><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a><code>SET</code></h3><ul><li><p>语法：<code>SET key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]</code></p></li><li><p>描述：给某个 key 设置值，如果该 key 存在值，则覆盖，而且无视旧值的类型，任何先前与该键关联的生存时间在成功SET操作时都将被丢弃。</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/set/">参考官方 set 命令</a></p></li><li><p>参数选项</p><ul><li>EX seconds – 设置指定的过期时间，以秒为单位。 </li><li>PX 毫秒——设置指定的过期时间，以毫秒为单位。 </li><li>EXAT timestamp-seconds – 设置密钥过期的指定 Unix 时间，以秒为单位。 </li><li>PXAT timestamp-milliseconds – 设置密钥过期的指定 Unix 时间，以毫秒为单位。 </li><li>NX– 仅当密钥不存在时才设置它。 </li><li>XX– 仅当密钥已存在时才设置它。 </li><li>KEEPTTL– 保留与密钥关联的生存时间。 </li><li>GET– 返回存储在 key 中的旧字符串，如果 key 不存在，则返回 nil。SET如果存储在 key 的值不是字符串，则返回并中止错误。</li><li>注意：由于SET命令选项可以替换SETNX, SETEX, PSETEX, GETSET，因此在未来的 Redis 版本中，这些命令可能会被弃用并最终被删除。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET mykey <span class="token string">"Hello"</span><span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span> GET mykey<span class="token string">"Hello"</span>127.0.0.1:6379<span class="token operator">></span> SET anotherkey <span class="token string">"will expire in a minute"</span> EX 60<span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span></code></pre></li></ul><h3 id="SETEX"><a href="#SETEX" class="headerlink" title="SETEX"></a><code>SETEX</code></h3><ul><li><p>语法：<code>SETEX key seconds value</code></p></li><li><p>描述：给某个 key 设置值和过期时间，如果该 key 存在值，则覆盖，而且无视旧值的类型，任何先前与该键关联的生存时间在成功SET操作时都将被丢弃。</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/setex/">参考官方 setex 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># setex 相当于以下命令</span>SET mykey valueEXPIRE mykey seconds<span class="token comment" spellcheck="true"># SETEX 是原子的，可以通过在MULTI/EXEC块中使用前两个命令来重现。它是作为给定操作序列的更快替代方案提供的，因为当 Redis 用作缓存时，此操作非常常见。</span>127.0.0.1:6379<span class="token operator">></span> SETEX mykey 10 <span class="token string">"Hello"</span><span class="token string">"OK"</span>127.0.0.1:6379<span class="token operator">></span> TTL mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> GET mykey<span class="token string">"Hello"</span></code></pre></li></ul><h3 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a><code>SETNX</code></h3><ul><li><p>语法：<code>SETNX key value</code></p></li><li><p>描述：仅当 key 不存在值时给某个 key 设置值，否则不执行设值</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/setnx/">参考官方 setnx 命令</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># key 不存在时返回 1</span>127.0.0.1:6379<span class="token operator">></span> SETNX mykey <span class="token string">"Hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># key 存在值时，命令不执行，返回 0</span>127.0.0.1:6379<span class="token operator">></span> SETNX mykey <span class="token string">"World"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> GET mykey<span class="token string">"Hello"</span></code></pre></li></ul><h3 id="SETRANGE"><a href="#SETRANGE" class="headerlink" title="SETRANGE"></a><code>SETRANGE</code></h3><ul><li><p>语法：<code>SETRANGE key offset value</code></p></li><li><p>描述：覆盖存储在key的部分字符串，从指定的偏移量 offset 开始，覆盖 value 的整个长度</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/setrange/">参考官方 setrange 命令</a></p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SET key1 <span class="token string">"Hello World"</span>OK127.0.0.1:6379<span class="token operator">></span> SETRANGE key1 6 <span class="token string">"Redis"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11 <span class="token comment" spellcheck="true"># 命令返回值为修改后的字符串长度</span>127.0.0.1:6379<span class="token operator">></span> GET key1<span class="token string">"Hello Redis"</span><span class="token comment" spellcheck="true"># 不存在的密钥当作空值，key5 不存在，所以执行命令时创建了 key5 ,持有空值</span>127.0.0.1:6379<span class="token operator">></span> SETRANGE key5 6 <span class="token string">"Redis"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11127.0.0.1:6379<span class="token operator">></span> get key5 <span class="token comment" spellcheck="true"># 当偏移量 6 大于原本 key5 的值的长度时，会在前面补 0</span><span class="token string">"\x00\x00\x00\x00\x00\x00Redis"</span></code></pre></li></ul><h3 id="STRLEN"><a href="#STRLEN" class="headerlink" title="STRLEN"></a><code>STRLEN</code></h3><ul><li><p>语法：<code>STRLEN key</code></p></li><li><p>描述：返回这个存储在这个 key 的字符串值的长度，如果该值不是字符串，返回错误。 key 不存在返回 0</p></li><li><p>时间复杂度：O(1)</p></li><li><p><a href="https://redis.io/commands/strlen/">参考官方 strlen 命令</a></p><pre class=" language-bash"><code class="language-bash">redis<span class="token operator">></span> SET mykey <span class="token string">"Hello world"</span><span class="token string">"OK"</span>redis<span class="token operator">></span> STRLEN mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11redis<span class="token operator">></span> STRLEN nonexisting<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre></li></ul><h3 id="SUBSTR"><a href="#SUBSTR" class="headerlink" title="SUBSTR"></a><code>SUBSTR</code></h3><ul><li>语法：<code>SUBSTR key start end</code></li><li>描述：截取存储在 key 的子字符串，起始位置为 start,结束位置为 end</li><li>时间复杂度：O(N)</li><li>redis 2.0.0 版本过期了，getrange 替换</li><li><a href="https://redis.io/commands/substr/">参考官方 substr 命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crypto</title>
      <link href="/2022/09/13/crypto/"/>
      <url>/2022/09/13/crypto/</url>
      
        <content type="html"><![CDATA[<h2 id="他山之石，可以攻玉"><a href="#他山之石，可以攻玉" class="headerlink" title="他山之石，可以攻玉"></a>他山之石，可以攻玉</h2><blockquote><p>在程序中需要加密或者解密数据，需要用到第三方API,仅仅使用 JDK 自带的加解密工具受出口限制，<code>密钥长度不能满足，部分算法未能支持，例如 MD4、SHA-224等</code></p><p>资料参考：<code>Java加密与解密的艺术</code></p></blockquote><h3 id="1、JCE"><a href="#1、JCE" class="headerlink" title="1、JCE"></a>1、JCE</h3><ul><li><p>jdk 自带加解密API,安全强度不高，主要原因：密钥长度不够</p></li><li><p>对以上问题，Sun 官方提供了无政策限制权限文件（Unlimited Strength Jurisdiction Policy Files）,只需要将其部署在 JRE 环境中就可以使用</p><ul><li><p>首先获取权限文件</p><ul><li><h6 id="在官网下载-jce-policy-version-zip-，version-表示-jdk版本号"><a href="#在官网下载-jce-policy-version-zip-，version-表示-jdk版本号" class="headerlink" title="在官网下载 jce_policy-version.zip ，version 表示 jdk版本号"></a>在官网下载 jce_policy-version.zip ，version 表示 jdk版本号</h6></li><li><h6 id="里面有-local-policy-jar-和-US-export-policy-jar-文件，用于放到-JRE-环境"><a href="#里面有-local-policy-jar-和-US-export-policy-jar-文件，用于放到-JRE-环境" class="headerlink" title="里面有 local_policy.jar 和 US_export_policy.jar 文件，用于放到 JRE 环境"></a>里面有 local_policy.jar 和 US_export_policy.jar 文件，用于放到 JRE 环境</h6></li><li><h6 id="将以上连个-jar-文件-放到-JDK-HOME-jre-lib-security-目录下，有可能有必要也放到-JRE-HOME-lib-security目录下覆盖"><a href="#将以上连个-jar-文件-放到-JDK-HOME-jre-lib-security-目录下，有可能有必要也放到-JRE-HOME-lib-security目录下覆盖" class="headerlink" title="将以上连个 jar 文件 放到 %JDK_HOME%\jre\lib\security 目录下，有可能有必要也放到 %JRE_HOME%\lib\security目录下覆盖"></a>将以上连个 jar 文件 放到 %JDK_HOME%\jre\lib\security 目录下，有可能有必要也放到 %JRE_HOME%\lib\security目录下覆盖</h6></li><li><p>注意，有时候应用服务器只安装 jre,有必要放在 %JRE_HOME%\lib\security目录下</p></li><li><p>验证：</p><ul><li>如何去验证呢？</li></ul><pre class=" language-java"><code class="language-java">修改这个权限文件的目的是为了获得更长的密钥，对于同一个加密算法，权限配置前后的所支持的密钥长度是不一样的。如果支持更长的密钥长度，说明配置生效        </code></pre><ul><li><p>以 AES 算法为例，（对称加密算法之一，几乎安全级别最高）</p><p>Java 6 支持 AES 算法的密钥长度为 128、192、256位，如果不加权限文件，使用会报错 ：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException</code></pre><p>反之会获得正常 256 位的 AES 密钥</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Key_Algorithm 生成密钥的算法，例如 AES</span>KeyGenerator kg <span class="token operator">=</span> KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Key_Algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// AES 支持 128 位、192位、256 位,初始化生成的密钥长度</span>kg<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SecretKey secretKey <span class="token operator">=</span> kg<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、BouncyCastle"><a href="#2、BouncyCastle" class="headerlink" title="2、BouncyCastle"></a>2、BouncyCastle</h3></li></ul></li></ul></li></ul></li><li><p>但是呢，许多高强度的算法在 JDk 中是没有的，所以需要借助 BC 库，也就是 BouncyCastle，可以在沿用 JDK 下使用 BC 库</p><ul><li><p>获取 BC 库的 jar 文件(Maven 依赖）</p><ul><li><p>在 Bouncy Castle 官网下载 bcprov-jdk16-146.jar 和 bcprov-ext-jdk16-146.jar,也可以下载 包含源码和 API 文档 的 bcprov-jdk16-146.zip</p></li><li><p>如何扩展使用</p><ul><li><p>配置方式（不推荐）</p><ul><li><p>通过配置在 JRE 环境，代码中不会显示 Bouncy Castle  Provider</p></li><li><p>分别在 %JDK_HOME%\jre\lib\security\ 和 %JRE_HOME%\lib\security\ 目录下找到 java.security 文件，添加如下：<code>security.provider.11=org.bouncycastle.jce.provider.BouncycastleProvider</code></p><p>配置方式，按顺序，</p><p><code>security.provider.n=provider完整 类名</code></p><pre class=" language-shell"><code class="language-shell">## List of providers and their preference orders (see above):#security.provider.1=sun.security.provider.Sunsecurity.provider.2=sun.security.rsa.SunRsaSignsecurity.provider.3=sun.security.ec.SunECsecurity.provider.4=com.sun.net.ssl.internal.ssl.Providersecurity.provider.5=com.sun.crypto.provider.SunJCEsecurity.provider.6=sun.security.jgss.SunProvidersecurity.provider.7=com.sun.security.sasl.Providersecurity.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRIsecurity.provider.9=sun.security.smartcardio.SunPCSCsecurity.provider.10=sun.security.mscapi.SunMSCAPIsecurity.provider.11=org.bouncycastle.jce.provider.BouncycastleProvider</code></pre></li><li><p>分别在 %JDK_HOME%\jre\lib\ext\ 和 %JRE_HOME%\lib\ext\ 目录下看到 sunjce_provider.jar，这是支持 jce 的，所以，把 bcprov-ext-jdk16-146.jar 放在该目录下就完成了支持 BC 库</p></li><li><p>调用方式 (推荐)</p><ul><li><p>依赖于 Security 类的 addProvider()方法，显示加载 BC  Provider</p></li><li><p>将 bcprov-jdk16-146.jar 引入工程</p><ul><li><p>如果是 maven 管理</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>bouncycastle<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>bcprov<span class="token operator">-</span>jdk16<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.46</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li></ul></li><li><p>如何显示调用 BC Provider</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始化 密钥工厂（KeyFactory）、密钥生成器（KeyGenerator）之前调用以下一行代码</span>Security<span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以在初始化 密钥工厂（KeyFactory）、密钥生成器（KeyGenerator）等引擎类的同时使用 "BC" ，完成构建</span>MessageDigest md <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD4"</span><span class="token punctuation">,</span><span class="token string">"BC"</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//BC 库的 Base64 编码解码 例子</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> <span class="token string">"中国更强"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : [ "</span><span class="token operator">+</span>data<span class="token operator">+</span><span class="token string">" ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String output <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 [ "</span><span class="token operator">+</span>data<span class="token operator">+</span><span class="token string">" ] 原文 Base64 编码得到 : "</span><span class="token operator">+</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypt <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 Base64 编码后的 [ "</span><span class="token operator">+</span>output<span class="token operator">+</span><span class="token string">" ] 进行 Base64 解码得到 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果如下：</span>原文 <span class="token operator">:</span> <span class="token punctuation">[</span> 中国更强 <span class="token punctuation">]</span>对 <span class="token punctuation">[</span> 中国更强 <span class="token punctuation">]</span> 原文 Base64 编码得到 <span class="token operator">:</span> 5Lit5Zu95pu05by6对 Base64 编码后的 <span class="token punctuation">[</span> 5Lit5Zu95pu05by6 <span class="token punctuation">]</span> 进行 Base64 解码得到 <span class="token operator">:</span> 中国更强</code></pre><ul><li>UrlBase64: Base64 的变体，将字符映射表中用做补位的 “=”,换成 “.”,并用 “-“ 和 “_” 分别代替 “+”,”/“,使得 Base64 编码符合 Url 参数规则</li></ul><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//BC 库的 UrlBase64 编码解码 例子</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">urlBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> <span class="token string">"Base64 编码"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : [ "</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">" ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> UrlBase64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 [ "</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">" ] 原文 UrlBase64 编码得到 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypt <span class="token operator">=</span> UrlBase64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 UrlBase64 编码后的 [ "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ] 进行 UrlBase64 解码得到 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果如下：</span>原文 <span class="token operator">:</span> <span class="token punctuation">[</span> Base64 编码 <span class="token punctuation">]</span>对 <span class="token punctuation">[</span> Base64 编码 <span class="token punctuation">]</span> 原文 UrlBase64 编码得到 <span class="token operator">:</span> QmFzZTY0IOe8lueggQ<span class="token punctuation">.</span><span class="token punctuation">.</span>对 UrlBase64 编码后的 <span class="token punctuation">[</span> QmFzZTY0IOe8lueggQ<span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span> 进行 UrlBase64 解码得到 <span class="token operator">:</span> Base64 编码</code></pre><ul><li>Hex 编码解码</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String hexData <span class="token operator">=</span> <span class="token string">"Hex 编码"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : [ "</span><span class="token operator">+</span>hexData<span class="token operator">+</span><span class="token string">" ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> hexData<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 [ "</span><span class="token operator">+</span>hexData<span class="token operator">+</span><span class="token string">" ] 原文 Hex 编码得到 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypt <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 Hex 编码后的 [ "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ] 进行 Hex 解码得到 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果如下：</span>原文 <span class="token operator">:</span> <span class="token punctuation">[</span> Hex 编码 <span class="token punctuation">]</span>对 <span class="token punctuation">[</span> Hex 编码 <span class="token punctuation">]</span> 原文 Hex 编码得到 <span class="token operator">:</span> 48657820e7bc96e7a081对 Hex 编码后的 <span class="token punctuation">[</span> 48657820e7bc96e7a081 <span class="token punctuation">]</span> 进行 Hex 解码得到 <span class="token operator">:</span> Hex 编码   </code></pre><h3 id="3、Commons-Codec"><a href="#3、Commons-Codec" class="headerlink" title="3、Commons Codec"></a>3、Commons Codec</h3></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>参考具体的资料，类似 bouncycastle 的使用</p></li><li><p>Base64OutputStream,Base64InputStream 对 Base64 流的支持</p></li><li><p>标准的rfc2045</p><h3 id="4、Base64-编码"><a href="#4、Base64-编码" class="headerlink" title="4、Base64 编码"></a>4、Base64 编码</h3></li></ul><h4 id="4-1、由来"><a href="#4-1、由来" class="headerlink" title="4.1、由来"></a>4.1、由来</h4><ul><li><p>最早用于解决电子邮件传输问题</p></li><li><p>由于 “历史问题”，电子邮件只允许 ASCII 编码字符，如果要传输一封带有非 ASCII编码字符的电子邮件，当它通过 “历史问题” 的网关时可能就会出现问题，这个网关很可能会对这个非ASCII码字符二进制位做调整，即将这个非ASCII码的8位二进制码的最高位置为 0，此时用户收到的就是一封纯粹的乱码邮件</p></li></ul><h4 id="4-2、定义"><a href="#4-2、定义" class="headerlink" title="4.2、定义"></a>4.2、定义</h4><ul><li><p>Base64 是一种基于<code>64</code>个字符的编码算法</p></li><li><p>经 Base64 编码后的数据长度是原来的<code>4/3</code>倍</p></li><li><p>经 Base64 编码后的字符串的字符数是以 <code>4</code>为单位的整数倍</p></li><li><p> Base 64 字符映射表 (A-Z a-z 0-9 + / =)</p></li></ul><table><thead><tr><th>value</th><th>encoding</th><th>value</th><th>encoding</th><th>value</th><th>encoding</th><th>value</th><th>encoding</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>17</td><td>R</td><td>34</td><td>i</td><td>51</td><td>z</td></tr><tr><td>1</td><td>B</td><td>18</td><td>S</td><td>35</td><td>j</td><td>52</td><td>0</td></tr><tr><td>2</td><td>C</td><td>19</td><td>T</td><td>36</td><td>k</td><td>53</td><td>1</td></tr><tr><td>3</td><td>D</td><td>20</td><td>U</td><td>37</td><td>l</td><td>54</td><td>2</td></tr><tr><td>4</td><td>E</td><td>21</td><td>V</td><td>38</td><td>m</td><td>55</td><td>3</td></tr><tr><td>5</td><td>F</td><td>22</td><td>W</td><td>39</td><td>n</td><td>56</td><td>4</td></tr><tr><td>6</td><td>G</td><td>23</td><td>X</td><td>40</td><td>o</td><td>57</td><td>5</td></tr><tr><td>7</td><td>H</td><td>24</td><td>Y</td><td>41</td><td>p</td><td>58</td><td>6</td></tr><tr><td>8</td><td>I</td><td>25</td><td>Z</td><td>42</td><td>q</td><td>59</td><td>7</td></tr><tr><td>9</td><td>J</td><td>26</td><td>a</td><td>43</td><td>r</td><td>60</td><td>8</td></tr><tr><td>10</td><td>K</td><td>27</td><td>b</td><td>44</td><td>s</td><td>61</td><td>9</td></tr><tr><td>11</td><td>L</td><td>28</td><td>c</td><td>45</td><td>t</td><td>62</td><td>+</td></tr><tr><td>12</td><td>M</td><td>29</td><td>d</td><td>46</td><td>u</td><td>63</td><td>/</td></tr><tr><td>13</td><td>N</td><td>30</td><td>e</td><td>47</td><td>v</td><td>(pad)</td><td>=</td></tr><tr><td>14</td><td>O</td><td>31</td><td>f</td><td>48</td><td>w</td><td></td><td></td></tr><tr><td>15</td><td>P</td><td>32</td><td>g</td><td>49</td><td>x</td><td></td><td></td></tr><tr><td>16</td><td>Q</td><td>33</td><td>h</td><td>50</td><td>y</td><td></td><td></td></tr></tbody></table><ul><li><h6 id="解释-：-value-指的是十进制编码-，encoding-指的是-字符-是用来做补位的"><a href="#解释-：-value-指的是十进制编码-，encoding-指的是-字符-是用来做补位的" class="headerlink" title="解释 ： value 指的是十进制编码 ，encoding 指的是 字符 , = 是用来做补位的"></a>解释 ： value 指的是十进制编码 ，encoding 指的是 字符 , = 是用来做补位的</h6></li></ul><h4 id="4-3、实现原理"><a href="#4-3、实现原理" class="headerlink" title="4.3、实现原理"></a>4.3、实现原理</h4><pre class=" language-shell"><code class="language-shell"># 1、将给定的字符串以字符为单位，转成对应的字符编码（ASCII码 或者UTF-8码）# 2、将获得的字符编码转换成二进制编码# 3、将获得的二进制码做分组转换操作，每3个8位二进制码为一组，转成每4个6位二进制码为一组（不足6位时低位补#    0） 这是一个分组变化过程（3*8=4*6=24）    # 4、将分组后的每个6位二进制码补位，向6位二进制码高位补2个0变成8位二进制码# 5、将变成8位二进制的每个分组数据转成十进制码# 6、将转成的每个十进制码转换成 Base64字符映射表中对应的字符</code></pre><pre class=" language-shell"><code class="language-shell"># 以 ASCII码为例子1、当只有一个字符串 "A" 时# 字符                         A# A 对应的ASCII码              65# A 对应的二进制码             01000001（不够三个，有多少按多少分组）#  转成6位二进制码             010000   010000 （上一步不够三个8位二进制码，所以这一步按每6位分一组，                                            只能分成2组）# 补高位成8位二进制码          00010000  00010000# 将8位二进制码转十进制码      16         16# 十进制对应Base64映射表字符   Q          Q结果等于 QQ？不是这样的要根据一个原则：    1、经 Base64 编码后的字符串的字符数是以 4为单位的整数倍    这里 QQ 才是2,需要做补位怎么做补位呢？    根据余数    余数 = 原文字节数%3    余数为 0， 不用 = 号补位，余数为1，补位1个 = 号，余数为2，补位2个 == 号这里原文字节数 A 为1个字节 1%3=1，要为 4 的倍数，编码后的是 2 个 字符，所以需要补位2个 == 号所以最终的结果是 ： QQ==</code></pre><pre class=" language-shell"><code class="language-shell"># 补充一个 UTF-8 码字符串为中文的例子1、以 "密" 为例，它的 UTF-8 编码为 -27 -81 -122# 字符                         密# 密 对应的UTF-8 编码            -27         -81          -122# 密 对应的二进制码            11100101     10101111     10000110  #  转成6位二进制码             111001  011010  111110 000110# 补高位成8位二进制码          00111001  00011010 00111110 00000110# 将8位二进制码转十进制码       57         26        62       6# 十进制对应Base64映射表字符     5          a        +        G因为 密的字节数为 3 （ -27 -81 -122 ），所以 3%3=0，不需要补位 "=" 号所以结果为 5a+G</code></pre><h4 id="4-4、基于-Base64算法数据传递的应用时序图"><a href="#4-4、基于-Base64算法数据传递的应用时序图" class="headerlink" title="4.4、基于 Base64算法数据传递的应用时序图"></a>4.4、基于 Base64算法数据传递的应用时序图</h4><pre class=" language-shell"><code class="language-shell"># -> 表示 实线 --> 表示虚线 ->> 表示实线箭头 -->> 表示虚线箭头</code></pre><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram甲方(发送方) ->> 甲方(发送方) :  1、甲方对数据进行 Base64编码甲方(发送方) ->> 乙方(接收方) :  2、发送 Base64 编码后的数据乙方(接收方) ->> 乙方(接收方) :  3、对接收到的 Base64编码数据解码</code></pre><pre class=" language-shell"><code class="language-shell"># 操作流程# 1、甲方对数据做 Base64 编码处理# 2、甲方将编码后的数据发送给乙方# 3、乙方获得数据后对数据做解码处理</code></pre><h3 id="5、消息摘要-验证数据完整性"><a href="#5、消息摘要-验证数据完整性" class="headerlink" title="5、消息摘要-验证数据完整性"></a>5、消息摘要-验证数据完整性</h3><h4 id="5-1、消息摘要算法简述"><a href="#5-1、消息摘要算法简述" class="headerlink" title="5.1、消息摘要算法简述"></a>5.1、消息摘要算法简述</h4><ul><li>消息摘要算法包含 <code>MD</code> 、<code>SHA</code>、<code>MAC</code> 共三大系列，常用于验证数据的完整性，是数字签名算法的核心算法</li><li>散列函数，验证数据的完整性，任何消息经过散列函数的处理，都会获得唯一的一个散列值，这一过程叫<code>消息摘要</code> ,散列值叫<code>数字指纹</code> ，换句话说，数字指纹唯一，说明数据是一致的，也就是验证原来的数据是不被篡改过的</li><li>方便阅读，数字指纹常以十六进制表示</li></ul><h4 id="5-2、消息摘要算法家族"><a href="#5-2、消息摘要算法家族" class="headerlink" title="5.2、消息摘要算法家族"></a>5.2、消息摘要算法家族</h4><ul><li><p>根本</p><ul><li>核心在于散列函数的单向性，不可通过散列值逆推原始值，这是消息摘要算法安全的根本所在</li></ul></li><li><p>MD 家族</p><ul><li>MD –&gt; Message Digest 消息摘要，MD2、MD4、MD5共 3 中算法</li></ul></li><li><p>SHA 家族</p><ul><li>包括 SHA-1(SHA)和SHA-1的变体 SHA-2(SHA-224、SHA-256、SHA-384、SHA-512)</li></ul></li><li><p>MAC 家族</p><ul><li>综合以上两种算法，HmacMD5、HmacSHA1、Hmac256、HmacSHA384、HmacSHA512</li></ul></li><li><p>RipeMD 等等</p></li></ul><h4 id="5-3、消息摘要算法实现"><a href="#5-3、消息摘要算法实现" class="headerlink" title="5.3、消息摘要算法实现"></a>5.3、消息摘要算法实现</h4><table><thead><tr><th>算法</th><th>摘要长度（位）</th><th>备注</th></tr></thead><tbody><tr><td>MD2</td><td>128</td><td>Java 6 实现</td></tr><tr><td>MD5</td><td>128</td><td>Java 6 实现</td></tr><tr><td>MD4</td><td>128</td><td>Bouncy Castle 实现（特别标出来立意是 Java 6不支持）</td></tr></tbody></table><ul><li><p>MD5 例子</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Sun 跟 BouncyCastle 组合</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MD5Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> <span class="token string">"MD5 计算消息摘要"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//MD2、MD4一样的用法</span>            MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> verify <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字指纹 : "</span> <span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验证数字指纹 : "</span> <span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>verify<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"MD5计算摘要 : "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果</span>数字指纹 <span class="token operator">:</span> c0e8e6ea3635be31265eab56e9392d19验证数字指纹 <span class="token operator">:</span> <span class="token boolean">true</span></code></pre></li><li><table><thead><tr><th>算法</th><th>摘要长度（位）</th><th>备注</th></tr></thead><tbody><tr><td>SHA-1</td><td>160</td><td>Java 6 实现</td></tr><tr><td>SHA-256</td><td>256</td><td>Java 6 实现</td></tr><tr><td>SHA-384</td><td>384</td><td>Java 6 实现</td></tr><tr><td>SHA-512</td><td>512</td><td>Java 6 实现</td></tr><tr><td>SHA-224</td><td>224</td><td>Bouncy Castle 实现（特别标出来立意是 Java 6不支持）</td></tr></tbody></table><ul><li>SHA 与 MD 算法不同在于 SHA的摘要长度更长，安全性更高</li><li>消息摘要应用时序图</li></ul></li></ul><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram甲方(发送方) ->> 乙方(接收方) :  1、甲方公布消息摘要算法甲方(发送方) ->> 甲方(发送方) :  2、甲方对待发送的消息做摘要处理甲方(发送方) ->> 乙方(接收方) :  3、甲方向乙方发送摘要处理后的数字指纹甲方(发送方) ->> 乙方(接收方) :  4、甲方向乙方发送待做摘要处理的消息乙方(接收方) ->> 乙方(接收方) :  5、乙方获得待做摘要处理的消息后，使用甲方公布的摘要算法对消息做摘要，获得数字指纹后与甲方发送给乙方的数字指纹做对比，一致则验证没被篡改，否则被篡改</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// SHA 算法计算摘要，以 SHA256 为例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SHA256Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> <span class="token string">"SHA256 计算消息摘要"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//SHA-1(简称 SHA)、SHA224、SHA384、SHA512一样的用法</span>            MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA-256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> verify <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字指纹 : "</span> <span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验证数字指纹 : "</span> <span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>verify<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"SHA 256计算摘要 : "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：</span>数字指纹 <span class="token operator">:</span> 3f2fd32efd99fb6eb8b02c49a44639bea3f36a1af78d0d7a720f33767e35b78c验证数字指纹 <span class="token operator">:</span> <span class="token boolean">true</span></code></pre><ul><li>MAC 算法<ul><li>MAC 算法结合了<code>MD5</code> 和 <code>SHA</code> 的优势，并加入了<code>密钥</code>的支持，是一种更为安全的消息摘要算法</li><li>MAC  : <code>Message Authentication Code,消息认证码算法</code> ,是含有密钥散列函数的算法，所以 MAC 也称为 HMAC (keyed-Hash Message Authentication Code )</li><li>MAC 集合了 MD 和 SHA 两种系列摘要算法，MD 系列算法：HmacMD2、HmacMD4、HmacMD5，SHA系列算法：HmacSHA1、HmacSHA224、HmacSHA256、HmacSHA384、HmacSHA512</li><li>MAC 算法计算的摘要长度跟参与计算的算法摘要长度一样，例如 HmacSHA256 计算的摘要长度是 64 位的十六进制数，与 SHA256 计算的摘要长度是 64 位的十六进制数一样</li></ul></li><li>基于 MAC 算法的消息传递模型</li></ul><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram甲方(发送方) ->> 乙方(接收方) :  1、甲方公布消息摘要算法甲方(发送方) ->> 甲方(发送方) :  2、甲方构建密钥甲方(发送方) ->> 乙方(接收方) :  3、甲方向乙方发送密钥甲方(发送方) ->> 甲方(发送方) :  4、甲方对待发消息做摘要处理甲方(发送方) ->> 乙方(接收方) :  5、甲方向乙方发送摘要消息甲方(发送方) ->> 乙方(接收方) :  6、甲方向乙方发送待发消息乙方(接收方) ->> 乙方(接收方) :  7、乙方鉴别消息，判断摘要消息与甲方的摘要消息是否一致</code></pre><pre class=" language-shell"><code class="language-shell"># 流程：# 甲方向乙方公布摘要算法# 甲乙双方约定按照约定构建密钥，并由一方提供（这里设计甲方提供给乙方）# 甲方使用密钥对消息做摘要处理，将摘要信息发送给乙方# 甲方再把消息发给乙方# 乙方收到消息后，使用密钥对消息做摘要处理，并对比甲方发送的摘要信息是否一致，一致则唯一不被篡改，否则，数据被篡改</code></pre><table><thead><tr><th>算法</th><th>摘要长度（位）</th><th>备注</th></tr></thead><tbody><tr><td>HmacMD5</td><td>128</td><td>Java 6 实现</td></tr><tr><td>HmacSHA1</td><td>160</td><td>Java 6 实现</td></tr><tr><td>HmacSHA256</td><td>256</td><td>Java 6 实现</td></tr><tr><td>HmacSHA384</td><td>384</td><td>Java 6 实现</td></tr><tr><td>HmacSHA512</td><td>512</td><td>Java 6 实现</td></tr><tr><td>HmacMD2</td><td>128</td><td>Bouncy Castle 实现（特别标出来立意是 Java 6不支持）</td></tr><tr><td>HmacMD4</td><td>128</td><td>Bouncy Castle 实现（特别标出来立意是 Java 6不支持）</td></tr><tr><td>HmacSHA224</td><td>224</td><td>Bouncy Castle 实现（特别标出来立意是 Java 6不支持）</td></tr></tbody></table><ul><li><p>MAC 算法是带有密钥的算法，计算摘要需要分为两步：</p><ul><li><p>构建密钥</p></li><li><p>使用构建的密钥计算摘要</p></li></ul></li><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1、构建密钥</span><span class="token comment" spellcheck="true">/**     * 构建 MAC 密钥用于 MAC 摘要计算     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildMacKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过指定的算法初始化 KeyGenerator</span>            KeyGenerator keyGenerator <span class="token operator">=</span> KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"HmacMD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//产生对称密钥</span>            SecretKey secretKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获得密钥</span>            <span class="token keyword">return</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"构建 Mac key 失败"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2、使用密钥计算摘要</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MacEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过构建密钥的算法对密钥进行还原成 SecretKey 对象</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token function">buildMacKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"HmacMD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> <span class="token string">"MAC 计算摘要"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//实例化 MAC</span>            Mac mac <span class="token operator">=</span> Mac<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化 MAC</span>            mac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行消息摘要</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> mac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> <span class="token operator">|</span> InvalidKeyException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"MAC 计算摘要失败 : "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：</span>d362da18bcfac6bbc4894890b0129eff</code></pre></li><li><p>循环冗余校验算法-CRC算法</p><ul><li><p>根据数据产生简短固定位数的一种散列函数，主要用来检测或校验数据传输/保存后出现的错误</p></li><li><p>生成的散列值在传输或存储之前计算出来并附加在数据后面</p></li><li><p>32 位二进制数，以 8位16进制数表示</p><pre class=" language-bash"><code class="language-bash">文件名称：C:\Users\Administrator\Desktop\K033-K999.zip文件大小：512050 字节修改时间：2020年3月16日 09:30:26MD5     ：E606FA147681797918A2487CB319FF8BSHA1    ：994D58AD4372F06564F5081FC71DD27ABF60790ACRC32   ：1B881965</code></pre></li><li><p>压缩/解压缩数据传递模型</p><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram甲方(发送方) ->> 甲方(发送方) :  1、甲方对数据做冗余校验处理甲方(发送方) ->> 甲方(发送方) :  2、甲方向数据尾部追加冗余校验码甲方(发送方) ->> 甲方(发送方) :  3、压缩甲方(发送方) ->> 乙方(接收方) :  4、甲方向乙方发送数据乙方(接收方) ->> 乙方(接收方) :  5、解压缩乙方(接收方) ->> 乙方(接收方) :  6、分离数据和冗余校验码乙方(接收方) ->> 乙方(接收方) :  7、校验</code></pre></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">crcEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> <span class="token string">"测试压缩冗余校验码"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//无参构造创造一个 CRC32 对象</span>        CRC32 crc32 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CRC32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//执行 update 完成,会生成一个长整型的冗余校验码</span>        crc32<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转成 Hex</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8位十六进制冗余校验码 : "</span><span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>crc32<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：</span><span class="token number">8</span>位十六进制冗余校验码 <span class="token operator">:</span> f25bb780</code></pre><ul><li>应用文件校验</li></ul><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//官方 ： apache-maven-3.5.4-bin.zip MD5校验码 ：235db716537989e9e949e5bf23f965c0</span>  <span class="token comment" spellcheck="true">/**       * 校验文件下载一致性       */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fileCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\apache-maven-3.5.4-bin.zip"</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>              DigestInputStream digestInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DigestInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span>MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> buf <span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> read <span class="token operator">=</span>digestInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>read<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  read <span class="token operator">=</span> digestInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              digestInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              MessageDigest messageDigest <span class="token operator">=</span> digestInputStream<span class="token punctuation">.</span><span class="token function">getMessageDigest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码计算文件 MD5 : "</span><span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"与官方 MD5 校验 :"</span><span class="token operator">+</span><span class="token string">"235db716537989e9e949e5bf23f965c0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span><span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果：</span>  代码计算文件 MD5 <span class="token operator">:</span> 235db716537989e9e949e5bf23f965c0  与官方 MD5 校验 <span class="token operator">:</span><span class="token boolean">true</span></code></pre><h3 id="6、对称加密算法"><a href="#6、对称加密算法" class="headerlink" title="6、对称加密算法"></a>6、对称加密算法</h3><h4 id="6-1、简述"><a href="#6-1、简述" class="headerlink" title="6.1、简述"></a>6.1、简述</h4><ul><li>解密算法是加密算法的逆运算</li><li>加密算法和解密算法使用同一套密钥</li><li>加密方式 ：密码、分组密码</li><li>分组密码工作模式 ： ECB、CBC、CFB、CTR等</li><li>常用到的算法还有 ： Blowfish、Twofish、Serpent、IDEA、PBE</li><li>DES密钥的长度不够，衍生出 DESede 算法（也称为 TripleDES 或3DES算法）,为了替代 DES,衍生出 AES算法</li><li>DES 和 DESede 算法在使用密钥材料还原密钥对象时，建议使用各自相应的密钥材料实现类（DES 算法使用 DESKeySpec 类，DESede 对应 DESedeKeySpec 类）</li><li>AES 算法在使用密钥材料还原密钥对象时使用一般的密钥材料实现类 SecretKeySpec , 其他算法可参照此用法，类似，RC2、RC4、Blowfish、Twofish、Serpent、IDEA、PBE等</li></ul><h4 id="6-2、对称加密算法模型"><a href="#6-2、对称加密算法模型" class="headerlink" title="6.2、对称加密算法模型"></a>6.2、对称加密算法模型</h4><ul><li><pre class=" language-mermaid"><code class="language-mermaid">  sequenceDiagram  甲方(发送方) ->> 甲方(发送方) :  1、甲方构建密钥  甲方(发送方) ->> 乙方(接收方) :  2、甲方向乙方公布密钥  甲方(发送方) ->> 甲方(发送方) :  3、甲方使用密钥对数据加密  甲方(发送方) ->> 乙方(接收方) :  4、甲方向乙方发送加密数据  乙方(接收方) ->> 乙方(接收方) :  5、使用密钥对数据解密</code></pre></li><li><p>这里甲乙双方约定一方构建密钥，然后向另一方公布构建密钥（假设甲方来构建密钥）</p></li><li><p>如果实现双向，乙方只需要反过来实行3、4步骤，甲方实行 5步骤就可以，</p></li></ul><h4 id="6-3、DES-算法"><a href="#6-3、DES-算法" class="headerlink" title="6.3、DES 算法"></a>6.3、DES 算法</h4><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>工作模式</th><th>填充模式</th><th>备注</th></tr></thead><tbody><tr><td>DES</td><td>56</td><td>56</td><td>ECB、CBC、PCBC、CTR、CTS、CFB、CFB8、CFB128、OFB、OFB8、OFB128</td><td>NoPadding、PKCS5Padding、ISO10126Padding</td><td>Java 6 实现</td></tr><tr><td>DES</td><td>64</td><td>56</td><td>ECB、CBC、PCBC、CTR、CTS、CFB、CFB8、CFB128、OFB、OFB8、OFB128</td><td>PKCS7Padding、ISO10126d2Padding、X932Padding、ISO7816d4Padding、ZeroBytePadding</td><td>BouncyCastle实现</td></tr></tbody></table><ul><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"DES"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  CIPHER_ALGORITHM <span class="token operator">=</span> <span class="token string">"DES/ECB/PKCS5Padding"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Security<span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">desEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1、使用 DES 加密前构建密钥     * @return byte[]     * @throws NoSuchAlgorithmException 没有这样的算法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定算法实例化密钥生成器</span>        KeyGenerator keyGenerator <span class="token operator">=</span> KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定密钥长度初始化密钥生成器</span>        keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成秘密密钥</span>        SecretKey secretKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回字节数组形式的密钥，便于存储在文件或者以流的形式在网络传输</span>        <span class="token keyword">return</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 2、将 byte[] 字节形式的密钥值转成 SecretKey 对象使用     * @param keys 密钥的字节数组形式     * @return &amp;#123;@link SecretKey&amp;#125;     * @throws InvalidKeyException 非法密钥     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeySpecException 非法密钥材料     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SecretKey <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 DES 密钥材料,将密钥转成 DES 密钥材料</span>        DESKeySpec desKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化秘密密钥工厂</span>        SecretKeyFactory keyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用秘密密钥工厂将材料转化生成秘密密钥对象</span>        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>desKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3、DES 加密     * @param secretKey 密钥对象     * @param messages 待加密数据     * @return byte[] 加密后的密文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为加密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行加密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 4、DES 解密     * @param secretKey 密钥对象     * @param cipherText 待解密数据     * @return byte[] 解密后的明文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为解密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行解密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">desEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">=</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 Hex: "</span><span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后明文: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后是否等于原文 : "</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>实际应用中，<code>密文</code>通常以<code>二进制数据</code>传输或存储，而<code>密钥</code>通常会转为<code>可见字符存储</code> ,例如使用<code>Base64</code>或者<code>十六进制</code>将不可见字符转成可见字符</p></li></ul><h4 id="6-4、DESede-算法"><a href="#6-4、DESede-算法" class="headerlink" title="6.4、DESede 算法"></a>6.4、DESede 算法</h4><ul><li><p>针对 DES 算法密钥长度偏短和迭代次数偏少问题做了改良，但是处理速度较慢，密钥计算时间较长，加密效率不高问题出现</p></li><li><p>实际应用采用 3DES 方案，别名分别为 ：Triple DES 、DESede ，Java 中成为 DESede 算法</p></li><li><p>对比 DES 算法，密钥材料实现类从 DESKeySpec 转为 DESedeKeySpec</p></li><li><p>算法差别 ：从 DES 转为 DESede</p></li><li><p>密钥长度差别 ：</p><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>工作模式</th><th>填充模式</th><th>备注</th></tr></thead><tbody><tr><td>DESede</td><td>112、168</td><td>168</td><td>ECB、CBC、PCBC、CTR、CTS、CFB、CFB8、CFB128、OFB、OFB8、OFB128</td><td>NoPadding、PKCS5Padding、ISO10126Padding</td><td>Java 6 实现</td></tr><tr><td>DESede</td><td>128、192</td><td>168</td><td>ECB、CBC、PCBC、CTR、CTS、CFB、CFB8、CFB128、OFB、OFB8、OFB128</td><td>PKCS7Padding、ISO10126d2Padding、X932Padding、ISO7816d4Padding、ZeroBytePadding</td><td>BouncyCastle实现</td></tr></tbody></table></li><li><p>代码实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Provider PROVIDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 密钥算法     * Java 6 支持密钥长度为 112位、168位     * Bouncy Castle 支持的密钥长度为 128位、192位     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"DESede"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加密/解密算法 / 工作模式 / 填充方式     * Java 6 支持PKCS5Padding     * Bouncy Castle 支持PKCS7Padding     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  CIPHER_ALGORITHM <span class="token operator">=</span> <span class="token string">"DESede/ECB/PKCS7Padding"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchProviderException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Security<span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">desEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1、使用 DES 加密前构建密钥     * @return byte[]     * @throws NoSuchAlgorithmException 没有这样的算法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定算法实例化密钥生成器</span>        KeyGenerator keyGenerator <span class="token operator">=</span> KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定密钥长度初始化密钥生成器,要大于等于168</span>        keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成秘密密钥</span>        SecretKey secretKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回字节数组形式的密钥，便于存储在文件或者以流的形式在网络传输</span>        <span class="token keyword">return</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 2、将 byte[] 字节形式的密钥值转成 SecretKey 对象使用     * @param keys 密钥的字节数组形式     * @return &amp;#123;@link SecretKey&amp;#125;     * @throws InvalidKeyException 非法密钥     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeySpecException 非法密钥材料     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SecretKey <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 3DES 密钥材料,将密钥转成 3DES 密钥材料</span>        DESedeKeySpec deSedeKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESedeKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化秘密密钥工厂</span>        SecretKeyFactory keyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用秘密密钥工厂将材料转化生成秘密密钥对象</span>        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>deSedeKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3、DES 加密     * @param secretKey 密钥对象     * @param messages 待加密数据     * @return byte[] 加密后的密文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为加密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行加密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 4、DES 解密     * @param secretKey 密钥对象     * @param cipherText 待解密数据     * @return byte[] 解密后的明文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为解密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行解密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">desEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">=</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 Hex: "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后明文: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后是否等于原文 : "</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="6-5、AES-算法"><a href="#6-5、AES-算法" class="headerlink" title="6.5、AES 算法"></a>6.5、AES 算法</h4></li><li><p>高级数据加密标准，替代 DES</p></li><li><p>密钥建立时间短、灵敏性好、内存需求低</p></li><li><p>目前常用于UMTS（Universial Mobile Telecommunications System）,通用移动通信系统，基于 ssh 部分协议也用到 AES 算法</p></li><li><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>工作模式</th><th>填充模式</th><th>备注</th></tr></thead><tbody><tr><td>AES</td><td>128、192、256</td><td>128</td><td>ECB、CBC、PCBC、CTR、CTS、CFB、CFB8、CFB128、OFB、OFB8、OFB128</td><td>NoPadding、PKCS5Padding、ISO10126Padding</td><td>Java 6 实现若使用256位密钥需要获取无政策限制权限文件</td></tr><tr><td>AES</td><td>128、192、256</td><td>128</td><td>ECB、CBC、PCBC、CTR、CTS、CFB、CFB8、CFB128、OFB、OFB8、OFB128</td><td>PKCS7Padding、ZeroBytePadding</td><td>BouncyCastle实现</td></tr></tbody></table></li><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 密钥算法     * Java 6 只支持密钥长度为 56位     * Bouncy Castle 支持的密钥长度为 64位     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加密/解密算法 / 工作模式 / 填充方式     * Java 6 支持PKCS5Padding     * Bouncy Castle 支持PKCS7Padding     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  CIPHER_ALGORITHM <span class="token operator">=</span> <span class="token string">"AES/ECB/PKCS5Padding"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">aesEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1、使用 AES 加密前构建密钥     * @return byte[]     * @throws NoSuchAlgorithmException 没有这样的算法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定算法实例化密钥生成器</span>        KeyGenerator keyGenerator <span class="token operator">=</span> KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定密钥长度初始化密钥生成器</span>        keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成秘密密钥</span>        SecretKey secretKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回字节数组形式的密钥，便于存储在文件或者以流的形式在网络传输</span>        <span class="token keyword">return</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 2、将 byte[] 字节形式的密钥值转成 SecretKey 对象使用     * @param keys 密钥的字节数组形式     * @return &amp;#123;@link SecretKey&amp;#125;     * @throws InvalidKeyException 非法密钥     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeySpecException 非法密钥材料     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SecretKey <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 SecretKeySpec 秘密密钥材料将密钥转成 秘密密钥</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3、AES 加密     * @param secretKey 密钥对象     * @param messages 待加密数据     * @return byte[] 加密后的密文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为加密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行加密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 4、AES 解密     * @param secretKey 密钥对象     * @param cipherText 待解密数据     * @return byte[] 解密后的明文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为解密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行解密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">aesEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">=</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 Hex: "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后明文: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后是否等于原文 : "</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="6-6、IDEA-算法"><a href="#6-6、IDEA-算法" class="headerlink" title="6.6、IDEA 算法"></a>6.6、IDEA 算法</h4></li><li><p>国际数据加密标准</p></li><li><p>密钥长度 128 位，数据块大小为 64 位</p></li><li><p>常用于电子邮件加密算法之一（商业版权）</p></li><li><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>工作模式</th><th>填充模式</th><th>备注</th></tr></thead><tbody><tr><td>IDEA</td><td>128</td><td>128</td><td>ECB</td><td>PKCS5Padding、PKCS7Padding、ISO10126Padding、ZeroBytePadding</td><td>Bouncy Castle实现</td></tr></tbody></table></li><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Provider PROVIDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 密钥算法     * Bouncy Castle 支持的密钥长度为 128位     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"IDEA"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加密/解密算法 / 工作模式 / 填充方式     * Bouncy Castle 支持PKCS7Padding     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  CIPHER_ALGORITHM <span class="token operator">=</span> <span class="token string">"IDEA/ECB/ISO10126Padding"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidKeyException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">ideaEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1、使用 IDEA 加密前构建密钥     * @return byte[]     * @throws NoSuchAlgorithmException 没有这样的算法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定算法实例化密钥生成器</span>        KeyGenerator keyGenerator <span class="token operator">=</span> KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定密钥长度初始化密钥生成器</span>        keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成秘密密钥</span>        SecretKey secretKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回字节数组形式的密钥，便于存储在文件或者以流的形式在网络传输</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IDEA 128位 密钥 : "</span><span class="token operator">+</span>Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 2、将 byte[] 字节形式的密钥值转成 SecretKey 对象使用     * @param keys 密钥的字节数组形式     * @return &amp;#123;@link SecretKey&amp;#125;     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SecretKey <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 SecretKeySpec 秘密密钥材料将密钥转成 秘密密钥</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3、IDEA 加密     * @param secretKey 密钥对象     * @param messages 待加密数据     * @return byte[] 加密后的密文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为加密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行加密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 4、IDEA 解密     * @param secretKey 密钥对象     * @param cipherText 待解密数据     * @return byte[] 解密后的明文字节数组形式     * @throws NoSuchPaddingException 没有这样的填充方式     * @throws NoSuchAlgorithmException 没有这样的算法     * @throws InvalidKeyException 非法密钥     * @throws BadPaddingException 错误的填充方式     * @throws IllegalBlockSizeException 非法块大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>SecretKey secretKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CIPHER_ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为解密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行解密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ideaEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">=</span> <span class="token function">buildSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token function">byteToSecretKey</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 Hex: "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后明文: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后是否等于原文 : "</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="6-7、PBE-算法（特例）"><a href="#6-7、PBE-算法（特例）" class="headerlink" title="6.7、PBE 算法（特例）"></a>6.7、PBE 算法（特例）</h4></li><li><p>PBE (Password Based Encryption,<code>基于口令加密</code>)</p></li><li><p>特点：口令由用户自己管理，采用随机数（通常我们叫盐）杂凑多重加密等方法保证数据的安全性</p></li><li><p>PBE 算法没有密钥的概念，而密钥是在其他对称加密算法中经过算法计算得出的，PBE 算法中则用口令代替密钥</p></li><li><p>PBE 算法并没有真正构建新的加密/解密算法，而是对我们已知的对称加密算法（如 DES 算法）做了包装，使用 PBE 算法对数据做加密/解密操作时，其实是使用了 DES 或者 AES 等其他对称加密算法做了相应的操作</p></li><li><p>既然 PBE 算法使用了对称加密算法，那就不可避免对称密钥，但口令不能代替密钥，但口令本身不能很长，常见的 PBE 算法有 : PBEWithMD5AndDES ,使用了 MD5 和 DES 算法构建了 PBE 算法</p></li><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Provider PROVIDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALGORITHM <span class="token operator">=</span> <span class="token string">"PBEWITHMD5andDES"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迭代次数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token keyword">int</span> ITERATION_COUNT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BadPaddingException<span class="token punctuation">,</span> InvalidAlgorithmParameterException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pbeEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 盐的初始化     * 盐的长度必须为 8 字节     * @return byte[] 盐     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SecureRandom secureRandom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> secureRandom<span class="token punctuation">.</span><span class="token function">generateSeed</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Key <span class="token function">toKey</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PBEKeySpec pbeKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PBEKeySpec</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecretKeyFactory secretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> secretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>pbeKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> salts<span class="token punctuation">,</span><span class="token keyword">int</span> iteration<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> message<span class="token punctuation">,</span>Key key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> InvalidAlgorithmParameterException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PBEParameterSpec pbeParameterSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PBEParameterSpec</span><span class="token punctuation">(</span>salts<span class="token punctuation">,</span>iteration<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">,</span>pbeParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> salts<span class="token punctuation">,</span><span class="token keyword">int</span> iteration<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">,</span>Key key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> InvalidAlgorithmParameterException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PBEParameterSpec pbeParameterSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PBEParameterSpec</span><span class="token punctuation">(</span>salts<span class="token punctuation">,</span>iteration<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">,</span>pbeParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pbeEncryptAndDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidAlgorithmParameterException<span class="token punctuation">,</span> NoSuchPaddingException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> salts <span class="token operator">=</span> <span class="token function">initSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"yuanhy"</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token function">toKey</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>salts<span class="token punctuation">,</span>ITERATION_COUNT<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>salts<span class="token punctuation">,</span>ITERATION_COUNT<span class="token punctuation">,</span>cipherText<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明文 : "</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>解释：<span class="token comment" spellcheck="true">/**     * 盐的初始化     * 盐的长度必须为 8 字节     * @return byte[] 盐     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SecureRandom secureRandom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> secureRandom<span class="token punctuation">.</span><span class="token function">generateSeed</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化盐时必须使用随机的方式构建盐，最终要得到一个 8 字节的字节数组盐，考虑安全，建议使用            SecureRandom</span><span class="token comment" spellcheck="true">// PBE 的密钥材料PBEKeySpec  PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());</span><span class="token comment" spellcheck="true">// 实例化 PBE 的参数材料</span> PBEParameterSpec pbeParameterSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PBEParameterSpec</span><span class="token punctuation">(</span>salts<span class="token punctuation">,</span>iteration<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">,</span>pbeParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="7、非对称加密算法"><a href="#7、非对称加密算法" class="headerlink" title="7、非对称加密算法"></a>7、非对称加密算法</h3><ul><li>非对称加密算法的速度远慢于对称加密算法，但是安全性比对称加密算法高</li><li>与对称加密算法不同的是，非对称加密算法的加密和解密使用的密钥不是同一个，一个公开，称为公钥，一个保密，称为私钥。因此非对称密码算法也被称为双钥或公钥加密算法</li><li>公钥通过非安全通道发放，私钥则由发放方保存。公钥与私钥相对应，成对出现。公钥加密的数据，只可用对应的私钥才能解密。反之，私钥加密的数据只可用对应的公钥才能解密</li><li>非对称加密算法源于 DH 算法（密钥交换算法）</li><li>分为两类：<ul><li>基于因子分解难题 ：RSA 算法是是最经典的非对称加密算法，既能用于数据加密也能用于数字签名</li><li>基于离散对数难题 ：<ul><li>ElGamal 算法：即可用于加解密，也可用于数字签名（DSA 演变基础）</li><li>ECC 算法 ：椭圆曲线加密</li></ul></li></ul></li></ul><h4 id="7-1、DH-算法"><a href="#7-1、DH-算法" class="headerlink" title="7.1、DH 算法"></a>7.1、DH 算法</h4><ul><li><p>来由</p><ul><li>对称加密算法提高了数据加密的安全性，但是密钥管理成为了最大的问题，DH 算法（密钥交换算法，密钥协商也是一种说法）用来解决如何安全传递密钥的难题</li></ul></li><li><p>简述</p><ul><li>目的让消息的收发双方在安全的条件下交换密钥，以备后续加密/解密使用</li><li>安全性基于有限域上的离散对数难题，基于这种安全性，通过 DH 算法进行密钥分配，使得消息的收发双方可以安全的交换一个秘密密钥，再通过这个秘密密钥对数据进行加密解密处理</li></ul></li><li><p>DH 算法模型图</p><pre class=" language-mermaid"><code class="language-mermaid">  sequenceDiagram  甲方(发送方) ->> 甲方(发送方) :  1、甲方构建甲方密钥（非对称密钥）  甲方(发送方) ->> 乙方(接收方) :  2、甲方向乙方公布甲方公钥  乙方(接收方) ->> 乙方(接收方) :  3、乙方使用甲方公钥构建乙方密钥（非对称密钥）  乙方(接收方) ->> 甲方(发送方) :  4、乙方向甲方公布乙方公钥  甲方(发送方) ->> 甲方(发送方) :  5、使用甲方私钥、乙方公钥构建本地密钥（非对称密钥）  乙方(接收方) ->> 乙方(接收方) :  5、使用乙方私钥、甲方公钥构建本地密钥（非对称密钥）  甲方(发送方) ->> 甲方(发送方) :  6、甲方使用本地密钥对消息加密  甲方(发送方) ->> 乙方(接收方) :  7、甲方向乙方发送加密消息  乙方(接收方) ->> 乙方(接收方) :  8、乙方使用本地密钥对加密消息解密</code></pre></li><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>BouncyCastleProvider<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DHPrivateKey<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DHPublicKey<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>DHParameterSpec<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>X509EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DHCoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Provider PROVIDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非对称加密密钥算法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALGORITHM <span class="token operator">=</span> <span class="token string">"DH"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本地密钥算法，即对称加密密钥算法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SECRET_ALGORITHM <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 密钥长度     * DH 算法密钥长度默认 1024     * 密钥长度必须是 64 的倍数，其范围在 512~1024 之间     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEY_SIZE <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//公钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"DHPublicKey"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"DHPrivateKey"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化甲方密钥     * @return Map 甲方密钥     * @throws NoSuchAlgorithmException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>KEY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DHPublicKey publicKey <span class="token operator">=</span> <span class="token punctuation">(</span>DHPublicKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DHPrivateKey privateKey <span class="token operator">=</span> <span class="token punctuation">(</span>DHPrivateKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化乙方密钥     * @param keys 甲方公钥     * @return Map 乙方密钥     * @throws NoSuchAlgorithmException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidAlgorithmParameterException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析甲方公钥，转换密钥材料</span>        X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生公钥</span>        PublicKey pubKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由甲方公钥构建乙方密钥</span>        DHParameterSpec dhParameterSpec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DHPublicKey<span class="token punctuation">)</span>pubKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化密钥生成器</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化密钥生成器</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>dhParameterSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乙方公钥</span>        DHPublicKey publicKey <span class="token operator">=</span> <span class="token punctuation">(</span>DHPublicKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乙方私钥</span>        DHPrivateKey privateKey <span class="token operator">=</span> <span class="token punctuation">(</span>DHPrivateKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>SECRET_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为加密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行加密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>SECRET_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 Cipher 对象，用于加解密操作</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，设置为加密模式</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行加密操作</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKey<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化公钥密钥材料转换</span>        X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生公钥</span>        PublicKey publicKey1 <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化私钥密钥材料转换</span>        PKCS8EncodedKeySpec pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生私钥</span>        PrivateKey privateKey1 <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化协商密钥对象</span>        KeyAgreement keyAgreement <span class="token operator">=</span> KeyAgreement<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyAgreement<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>privateKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyAgreement<span class="token punctuation">.</span><span class="token function">doPhase</span><span class="token punctuation">(</span>publicKey1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecretKey secretKey <span class="token operator">=</span> keyAgreement<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>SECRET_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidAlgorithmParameterException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DHCoderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//甲方公钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKey1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//甲方私钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//甲方本地密钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secretKey1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//乙方公钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKey2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//乙方私钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//乙方本地密钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secretKey2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidAlgorithmParameterException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成甲方密钥对</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map1 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">initKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        publicKey1 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        privateKey1 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"甲方公钥 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>publicKey1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"甲方私钥 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>privateKey1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由甲方公钥产生乙方密钥对</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map2 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">initKey</span><span class="token punctuation">(</span>publicKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>        publicKey2 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>        privateKey2 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乙方公钥 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>publicKey2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乙方私钥 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>privateKey2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//甲方本地密钥</span>        secretKey1 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span>publicKey2<span class="token punctuation">,</span>privateKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"甲方本地密钥 : "</span><span class="token operator">+</span>Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>secretKey1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乙方本地密钥</span>        secretKey2 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span>publicKey1<span class="token punctuation">,</span>privateKey2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乙方本地密钥 : "</span><span class="token operator">+</span>Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>secretKey2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"甲方向乙方发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String input <span class="token operator">=</span> <span class="token string">"密钥交换算法"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span><span class="token operator">+</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用甲方本地密钥对数据加密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText1 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>secretKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密密文 : "</span><span class="token operator">+</span>Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用乙方本地密钥对数据解密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText1 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cipherText1<span class="token punctuation">,</span>secretKey2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密明文: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用乙方本地密钥对数据加密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText2 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>secretKey2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密密文 : "</span><span class="token operator">+</span>Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用甲方本地密钥对数据解密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText2 <span class="token operator">=</span> DHCoder<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cipherText1<span class="token punctuation">,</span>secretKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密明文: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意一个问题，默认 SUN JCE Provider,在协商密钥对象时需要加上 BC 库的 Provider</span><span class="token comment" spellcheck="true">//实例化协商密钥对象</span>        KeyAgreement keyAgreement <span class="token operator">=</span> KeyAgreement<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>否则会报错 ：Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token operator">:</span> Unsupported secret key algorithm<span class="token operator">:</span> AES    at com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>DHKeyAgreement<span class="token punctuation">.</span><span class="token function">engineGenerateSecret</span><span class="token punctuation">(</span>DHKeyAgreement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">387</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>KeyAgreement<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>KeyAgreement<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">648</span><span class="token punctuation">)</span>    at bc<span class="token punctuation">.</span>DHCoder<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span>DHCoder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">130</span><span class="token punctuation">)</span>    at bc<span class="token punctuation">.</span>DHCoderTest<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>DHCoderTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">44</span><span class="token punctuation">)</span></code></pre><h4 id="7-2、RSA-算法"><a href="#7-2、RSA-算法" class="headerlink" title="7.2、RSA 算法"></a>7.2、RSA 算法</h4></li><li><p>遵循  ： “ 私钥加密–公钥解密 、公钥加密–私钥解密 “</p></li><li><p>基于 RSA 算法消息传递</p></li></ul><pre class=" language-mermaid"><code class="language-mermaid">    sequenceDiagram    甲方(发送方) ->> 甲方(发送方) :  1、甲方构建甲方密钥（非对称密钥）    甲方(发送方) ->> 乙方(接收方) :  2、甲方向乙方公布甲方公钥    甲方(发送方) ->> 甲方(发送方) :  3、甲方使用私钥加密数据    甲方(发送方) ->> 乙方(接收方) :  4、甲方向乙方发送加密后的数据    乙方(接收方) ->> 乙方(接收方) :  5、乙方使用公钥解密数据    乙方(接收方) ->> 乙方(接收方) :  6、乙方使用公钥加密数据    乙方(接收方) ->> 甲方(发送方) :  7、乙方向甲方发送加密后的数据    甲方(发送方) ->> 甲方(发送方) :  8、甲方使用私钥解密数据</code></pre><ul><li>实际上，仅遵循 “ 私钥加密，公钥解密 “ 更安全</li></ul><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>工作模式</th><th>填充模式</th><th>备注</th></tr></thead><tbody><tr><td>RSA</td><td>512~65536位、密钥长度必须是64的倍数</td><td>1024</td><td>ECB</td><td>NoPadding、PKCS1Padding、OAEPWITHMD5AndMGF1Padding、OAEPWITHSHA1AndMGF1Padding、OAEPWITHSHA256AndMGF1Padding、OAEPWITHSHA384AndMGF1Padding、OAEPWITHSHA512AndMGF1Padding、</td><td>Java 6实现</td></tr><tr><td>RSA</td><td>512~65536位、密钥长度必须是64的倍数</td><td>2048</td><td>NONE</td><td>NoPadding、PKCS1Padding、OAEPWITHMD5AndMGF1Padding、OAEPWITHSHA1AndMGF1Padding、OAEPWITHSHA256AndMGF1Padding、OAEPWITHSHA384AndMGF1Padding、OAEPWITHSHA512AndMGF1Padding、</td><td>Bouncy Castle 实现</td></tr></tbody></table><ul><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>X509EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSACoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RSA_ALGORITHM <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"RSAPublicKey"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"RSAPrivateKey"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Provider provider<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建 RSA 密钥对     * @param keySize 密钥长度     * @param provider 提供者     * @return Map 密钥对     * @throws NoSuchAlgorithmException     * @throws NoSuchProviderException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> keySize<span class="token punctuation">,</span>Provider provider<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> NoSuchProviderException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RSACoder<span class="token punctuation">.</span>provider <span class="token operator">=</span> provider<span class="token punctuation">;</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA_ALGORITHM<span class="token punctuation">,</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>keySize<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keyMap<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取公钥     * @param keyMap 密钥对     * @return byte[] 公钥字节数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取私钥     * @param keyMap 密钥对     * @return byte[] 私钥字节数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//私钥使用 PKCS8EncodedKeySpec 密钥参数材料</span>        PKCS8EncodedKeySpec pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA_ALGORITHM<span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                PKCS8EncodedKeySpec pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA_ALGORITHM<span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公钥使用 X509EncodedKeySpec 密钥参数材料</span>        X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA_ALGORITHM<span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA_ALGORITHM<span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RSACoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试代码</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>BouncyCastleProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchProviderException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>Provider<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSACoderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Provider provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchProviderException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">initKey</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKey <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        String input <span class="token operator">=</span> <span class="token string">"RSA 算法"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span><span class="token operator">+</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 公钥加密密文 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 私钥解密明文 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span><span class="token operator">+</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText1 <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 私钥加密密文 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText1 <span class="token operator">=</span> RSACoder<span class="token punctuation">.</span><span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span>cipherText1<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 公钥解密明文 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：</span>原文 <span class="token operator">:</span> RSA 算法RSA 公钥加密密文 <span class="token operator">:</span> NLdHuahaAgyY<span class="token operator">+</span>nzWt6bvXCE9VYGDbyh1YXpzvvt8pTRaVcg1TjHXOyr5<span class="token operator">/</span>31iYekP5LgZi5GUk7g89b<span class="token operator">+</span>V6ws1sXlqVUxxowXvf<span class="token operator">/</span>ah0ZMB1bZw<span class="token operator">+</span>JutMcmmyjrKmKHG3g<span class="token operator">/</span>bsn5KlMLQyUFdXSLmw364DnxDUWzhm1JPITbvAwsHEF4<span class="token operator">=</span>RSA 私钥解密明文 <span class="token operator">:</span> RSA 算法原文 <span class="token operator">:</span> RSA 算法RSA 私钥加密密文 <span class="token operator">:</span> XNXMfyLAcVmMuzo<span class="token operator">/</span>tkQWywMg1jyajLMfz3hBUsfGGZ6vpCefd3SW2dlqT<span class="token operator">/</span>CFKs<span class="token operator">+</span>MUaIfCnGCPtmYD<span class="token operator">/</span>JySbk<span class="token operator">+</span>GL7rnzoEswRJHZYVdKjG3d<span class="token operator">+</span>fNKkQigvudBdDq355S3yT<span class="token operator">/</span>RXUHlABJoKy1LoHIUwU2i9<span class="token operator">+</span>uLHuBkPkVy4bt8oZj7c<span class="token operator">=</span>RSA 公钥解密明文 <span class="token operator">:</span> RSA 算法</code></pre></li></ul><h4 id="7-3、EIGamal-算法"><a href="#7-3、EIGamal-算法" class="headerlink" title="7.3、EIGamal 算法"></a>7.3、EIGamal 算法</h4><ul><li><p>提高了安全性，不足之处，密文成倍扩张</p></li><li><p>现在例子只有 “ 公钥加密 – 私钥解密”</p></li><li><p>EIGamal 算法模型图</p></li></ul><pre class=" language-bash"><code class="language-bash">    甲方<span class="token punctuation">(</span>发送方<span class="token punctuation">)</span> --<span class="token operator">></span> 乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> <span class="token keyword">:</span>      乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> -<span class="token operator">>></span> 乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> <span class="token keyword">:</span>  1、乙方构建乙方密钥对（非对称密钥）    乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> -<span class="token operator">>></span> 甲方<span class="token punctuation">(</span>发送方<span class="token punctuation">)</span> <span class="token keyword">:</span>  2、乙方向甲方公布乙方公钥    甲方<span class="token punctuation">(</span>发送方<span class="token punctuation">)</span> -<span class="token operator">>></span> 甲方<span class="token punctuation">(</span>发送方<span class="token punctuation">)</span> <span class="token keyword">:</span>  3、甲方使用公钥对数据加密    甲方<span class="token punctuation">(</span>发送方<span class="token punctuation">)</span> -<span class="token operator">>></span> 乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> <span class="token keyword">:</span>  4、甲方向乙方发送加密后的数据    乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> -<span class="token operator">>></span> 乙方<span class="token punctuation">(</span>接收方<span class="token punctuation">)</span> <span class="token keyword">:</span>  5、乙方使用私钥解密数据</code></pre><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>工作模式</th><th>填充模式</th><th>备注</th></tr></thead><tbody><tr><td>EIGamal</td><td>160~16384位、密钥长度必须是8的倍数</td><td>1024</td><td>ECB、NONE</td><td>NoPadding、PKCS1Padding、OAEPWITHMD5AndMGF1Padding、OAEPWITHSHA1AndMGF1Padding、OAEPWITHSHA256AndMGF1Padding、OAEPWITHSHA384AndMGF1Padding、OAEPWITHSHA512AndMGF1Padding、</td><td>Bouncy Castle 实现</td></tr></tbody></table><ul><li><p>实现</p><ul><li>实现方式跟 RSA 差不多，差别在于初始化密钥对</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>DHParameterSpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidParameterSpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>X509EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EIgamalCoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ELGAMAL_ALGORITHM <span class="token operator">=</span> <span class="token string">"ElGamal"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"ElGamalPublicKey"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"ElGamalPrivateKey"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Provider provider<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 构建 EIGamal 密钥对   * @param keySize 密钥长度   * @param provider 提供者   * @return Map 密钥对   * @throws NoSuchAlgorithmException   * @throws NoSuchProviderException   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> keySize<span class="token punctuation">,</span>Provider provider<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidParameterSpecException<span class="token punctuation">,</span> InvalidAlgorithmParameterException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      EIgamalCoder<span class="token punctuation">.</span>provider <span class="token operator">=</span> provider<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//实例化算法参数生成器</span>      AlgorithmParameterGenerator algorithmParameterGenerator <span class="token operator">=</span> AlgorithmParameterGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ELGAMAL_ALGORITHM<span class="token punctuation">,</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化算法参数生成器</span>      algorithmParameterGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keySize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//生成算法参数</span>      AlgorithmParameters algorithmParameters <span class="token operator">=</span> algorithmParameterGenerator<span class="token punctuation">.</span><span class="token function">generateParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//构建参数材料</span>      DHParameterSpec dhParameterSpec <span class="token operator">=</span> algorithmParameters<span class="token punctuation">.</span><span class="token function">getParameterSpec</span><span class="token punctuation">(</span>DHParameterSpec<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ELGAMAL_ALGORITHM<span class="token punctuation">,</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>dhParameterSpec<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> keyMap<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 获取公钥   * @param keyMap 密钥对   * @return byte[] 公钥字节数组   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 获取私钥   * @param keyMap 密钥对   * @return byte[] 私钥字节数组   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      PKCS8EncodedKeySpec pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ELGAMAL_ALGORITHM<span class="token punctuation">,</span> EIgamalCoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>      Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> EIgamalCoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>ELGAMAL_ALGORITHM<span class="token punctuation">,</span> EIgamalCoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      PublicKey publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>      Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> EIgamalCoder<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>BouncyCastleProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidParameterSpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EIGamalCoderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Provider provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidParameterSpecException<span class="token punctuation">,</span> InvalidAlgorithmParameterException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> keyMap <span class="token operator">=</span> EIgamalCoder<span class="token punctuation">.</span><span class="token function">initKey</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKey <span class="token operator">=</span> EIgamalCoder<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey <span class="token operator">=</span> EIgamalCoder<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>      String input <span class="token operator">=</span> <span class="token string">"ElGamal 算法"</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span><span class="token operator">+</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> EIgamalCoder<span class="token punctuation">.</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ElGamal 公钥加密密文 : "</span><span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> EIgamalCoder<span class="token punctuation">.</span><span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ElGamal 私钥解密明文 : "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：</span>原文 <span class="token operator">:</span> ElGamal 算法ElGamal 公钥加密密文 <span class="token operator">:</span> pD80anRAHXX4GxpLl3Ha6y2vuPUzWlIfCKqqt1bM0yEyshOQVKlqAyy1VnBcsrPoHirl<span class="token operator">/</span><span class="token number">4</span><span class="token operator">+</span>tlyIi7MxJIuWFLYbiK<span class="token operator">+</span>ZbZuJ90zOLcE0uUCWqWI9IMTa<span class="token operator">+</span>fp2w6I0JyUAKbcgsl19qjInJWCk4bf3BpoCLwIEhfYedfkJc<span class="token operator">+</span>cEqQh2YPlu3B76S1o<span class="token operator">+</span>i4nEj4rIupC0oVjcZYSZ8YGkiaNRPxRLz9nklwLVYZu00BGveA<span class="token operator">/</span>g1zd4CeL6exeluvShEEBNIjVIRI<span class="token operator">+</span>QYYaiqENT<span class="token operator">+</span>egGv8iR9Vik1uI4j3CLtBmCDcHP7hdiMy1fHVXKPUUo25A1zrklPie1aKxxq6EFn7XuMBQ<span class="token operator">==</span>ElGamal 私钥解密明文 <span class="token operator">:</span> ElGamal 算法<span class="token comment" spellcheck="true">//注意，算法计算有点慢，ElGamal l 表示 L 的小写，不要搞错了</span></code></pre><h3 id="8、数字签名算法"><a href="#8、数字签名算法" class="headerlink" title="8、数字签名算法"></a>8、数字签名算法</h3></li><li><p>带密钥的消息摘要算法，而且这种密钥包含了公钥和私钥，即非对称密钥</p></li><li><p>数字签名算法是非对称加密算法和消息摘要算法的结合体</p></li><li><p>是公钥基础设施（Public Key Infrastructure PKI）以及许多网络安全机制（SSL/TLS、VPN 等）的基础</p></li><li><p>要求能够<code>验证数据完整性</code>、<code>认证数据来源</code>、<code>抗否认作用</code> ，与 OSI 参考模型中的数据完整性服务、认证（鉴别）服务和抗否认性服务相对应</p></li><li><p>用于签名的相关信息私有–&gt;对应私钥    用于验证签名的相关信息公有–&gt;对应公钥，所以遵循 私钥签名，公钥验签</p></li><li><p>签名时使用私钥和待签名数据 ，验签时使用公钥、签名、待签名数据</p></li><li><p>实际运用时，通常<code>先</code>使用消息摘要算法对原始数据做摘要处理，<code>然后</code>再使用私钥对摘要值做签名处理。验证签名时，使用公钥验证数据的摘要值</p></li><li><p>数字签名算法主要包括 ：RSA 、DSA、ECDSA，例如基于 RSA 算法密钥，结合摘要算法可形成对应的签名算法，例如结合消息摘要算法MD5，可形成 MD5WithRSA 签名算法</p></li><li><p>基于数字签名算法的消息传递模型</p><pre class=" language-mermaid"><code class="language-mermaid"> sequenceDiagram  甲方(发送方) ->> 甲方(发送方) :  1、甲方构建非对称密钥对  甲方(发送方) ->> 乙方(接收方) :  2、甲方向乙方公布公钥  甲方(发送方) ->> 甲方(发送方) :  3、甲方使用私钥对数据签名  甲方(发送方) ->> 乙方(接收方) :  4、甲方向乙方发送签名和数据  乙方(接收方) ->> 乙方(接收方) :  5、乙方使用公钥、签名验证数据</code></pre><pre class=" language-shell"><code class="language-shell"># 第 4 步 签名和数据（签名前的数据）一般作为一个整体发送给乙方# 私钥仅仅签名，公钥仅仅验签</code></pre></li></ul><h4 id="8-1、RSA-数字签名算法"><a href="#8-1、RSA-数字签名算法" class="headerlink" title="8.1、RSA 数字签名算法"></a>8.1、RSA 数字签名算法</h4><ul><li><p>实现</p><ul><li><p>经典数字签名算法</p></li><li><p>RSA 签名算法的密钥实现跟 RSA 加密算法一致，密钥产生和转换完全一致</p></li><li><p>RSA 数字签名算法分为 MD系列 和 SHA 系列</p><ul><li>MD系列 ：MD2withRSA 、MD5withRSA</li><li>SHA系列 ：SHA1withRSA、SHA224withRSA、SHA256withRSA、SHA384withRSA、SHA512WithRSA</li><li>SHA224withRSA、SHA256withRSA、SHA384withRSA、SHA512withRSA 由 BC 库支持</li></ul></li></ul></li></ul><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>签名长度</th><th>备注</th></tr></thead><tbody><tr><td>MD2withRSA 、MD5withRSA、SHA1withRSA</td><td>512~65536位（密钥长度必须是 64 的倍数）</td><td>1024</td><td>跟密钥长度相同</td><td>Java 6 实现</td></tr><tr><td>MD2withRSA 、MD5withRSA、SHA1withRSA、SHA224withRSA、SHA256withRSA、SHA384withRSA、SHA512withRSA、RIPEMD128withRSA、RIPEMD160withRSA</td><td>512~65536位（密钥长度必须是 64 的倍数）</td><td>2048</td><td>跟密钥长度相同</td><td>Bouncy Castle实现</td></tr></tbody></table><ul><li><p>RSA 算法签名  ————  签名</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化 Signature</span>Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5withRSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化 Signature(因为是使用私钥签名，所以用私钥初始化)</span>signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//更新，data 是待签名数据</span>signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//签名,sign 就是签名后的签名值</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>RSA 算法签名  ————  验签</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化 Signature</span>Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5withRSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化 Signature(因为是使用公钥验签，所以用公钥初始化)</span>signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//更新，data 是待验签数据</span>signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//验签,sign 就是签名后的签名值</span><span class="token keyword">boolean</span> status <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>RSA 签名算法默认长度 ：1024</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bc<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>X509EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSASignatureCoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//密钥算法，用于构建签名验签中使用的密钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//签名算法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SIGNATURE_ALGORITHM <span class="token operator">=</span> <span class="token string">"MD5withRSA"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"RSAPublicKey"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"RSAPrivateKey"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Provider provider<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**     * 构建签名验签密钥     *     * @param keySize  密钥长度(位)     * @param provider 提供者     * @return Map 密钥     * @throws NoSuchAlgorithmException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> keySize<span class="token punctuation">,</span> Provider provider<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RSASignatureCoder<span class="token punctuation">.</span>provider <span class="token operator">=</span> provider<span class="token punctuation">;</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>keySize<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keyMap<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//私钥转换使用 PKCS8EncodedKeySpec 密钥材料</span>        PKCS8EncodedKeySpec pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化 密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥工厂使用私钥密钥材料生成私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>SIGNATURE_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公钥转换使用 X509EncodedKeySpec 密钥材料</span>        X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化 密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥工厂使用公钥密钥材料生成公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>SIGNATURE_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>BouncyCastleProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Hex<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>Provider<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>SignatureException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSASignatureCoderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Provider PROVIDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEY_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap <span class="token operator">=</span> RSASignatureCoder<span class="token punctuation">.</span><span class="token function">initKey</span><span class="token punctuation">(</span>KEY_SIZE<span class="token punctuation">,</span> PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pubKey <span class="token operator">=</span> RSASignatureCoder<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 签名算法公钥 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>pubKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> priKey <span class="token operator">=</span> RSASignatureCoder<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 签名算法私钥 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>priKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"RSA 数字签名算法"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待签名数据 : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign <span class="token operator">=</span> RSASignatureCoder<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> priKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签名值长度 : "</span> <span class="token operator">+</span> sign<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 数字签名算法签名值 : "</span> <span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> status <span class="token operator">=</span> RSASignatureCoder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sign<span class="token punctuation">,</span> pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RSA 数字签名算法验签 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>status <span class="token operator">?</span> <span class="token string">"成功"</span> <span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试结果</span>RSA 签名算法公钥 <span class="token operator">:</span> MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDxxMr9bTteETx6hwOsmQE34es2Jw<span class="token operator">+</span>QEWS46HLaRrnDAF0M<span class="token operator">/</span>oxAvvwT4<span class="token operator">/</span>Fqqo4Z<span class="token operator">/</span>ljTyVoderNlxM3nNazFrWuKoE9RtdaMz5gtUlT<span class="token operator">/</span>YFeWU8DwB3Kr0c1n5YADUYkpd9SF3HzrGhz4XwmJ4zBo3sxQT9JfRCNWTNcssbaRQchMHwIDAQABRSA 签名算法私钥 <span class="token operator">:</span> MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAPHEyv1tO14RPHqHA6yZATfh6zYnD5ARZLjoctpGucMAXQz<span class="token operator">+</span>jEC<span class="token operator">+</span><span class="token operator">/</span>BPj8Wqqjhn<span class="token operator">+</span>WNPJWh16s2XEzec1rMWta4qgT1G11ozPmC1SVP9gV5ZTwPAHcqvRzWflgANRiSl31IXcfOsaHPhfCYnjMGjezFBP0l9EI1ZM1yyxtpFByEwfAgMBAAECgYAnkPKSJvOK9tHUUOQ5CuaNeVuVBoTK1GM3dP3W2wbrnX5HnMuMjQo<span class="token operator">+</span>ob87RaOb0r7sFLe6u1SWAxnvYh60UH1DZn0vznTGvXINAkok6bB1sgwna<span class="token operator">+</span>7AzagFuifNEdO6bufqfZ7H<span class="token operator">+</span>VdlKr0ojG1iPJzNA5RXu8g9SXXp5E5uRc<span class="token operator">/</span>1gQJBAP0lNy3wHMHAiR0e7C5FJ7AwDHKoNY2nT9OMkqsFy5WjbZh2tvMRHQHNR7Zo6x6xG8XCXiK34M<span class="token operator">+</span>2LNubByqizZ0CQQD0frwtqZd2yD5DrhL6DyMXHC8BGltdRVQ7ILawrZedZM8QPxm8ISbNVL<span class="token operator">+</span>351kao7IMQgSQjZ0J2JzvXnAFHLHrAkEAgXHOTYdCrTCu7F0rmF10dfub4eVxvQWZJCv1s8461EHFgPjzhEdz9b<span class="token operator">/</span>qs7Pixsb51J4XVNmB87TMK1<span class="token operator">+</span>SwpKNYQJAQHRMrYkA6gp<span class="token operator">+</span>B5<span class="token operator">+</span>TVyK4cHY4mgTVwy<span class="token operator">/</span>sta25G7iXuKGDyNeptCPVM9o8tIGjxtcSsBKTW3xJwve834m45FAdQwJAJeyMHy5eCl6E6p2p5jXAFOLk65CHC6<span class="token operator">+</span>M50swl6mlAVzR2<span class="token operator">+</span>JhxTtwHaZRU<span class="token operator">+</span>A4<span class="token operator">+</span>5kvUviGocZ1r2bekmRAsLgVfw<span class="token operator">==</span>待签名数据 <span class="token operator">:</span> RSA 数字签名算法签名值长度 <span class="token operator">:</span> <span class="token number">128</span>RSA 数字签名算法签名值 <span class="token operator">:</span> cc91cc57f73d447f288b10328561b2e80101d8aeeeb716c13aa6710d064cd7c0dde63ae5f1f7eeb445581769a3a6d2d2675a5f8a7549741ba4c0fae883c928432927e60dd937a3b9f9d3a7a3c089a9132e0f5961603b7a570997d5091f2a579001373e74a5f05f69c1785aa238fd9857d39d324070ff79034bedea4cc558325cRSA 数字签名算法验签 <span class="token operator">:</span> 成功  <span class="token comment" spellcheck="true">//注意 ： 这里的签名值字节长度 128 ，跟 1024位 RSA 密钥的字节长度相同，前面已经提及</span></code></pre></li></ul><h4 id="8-2、DSA-数字签名算法"><a href="#8-2、DSA-数字签名算法" class="headerlink" title="8.2、DSA 数字签名算法"></a>8.2、DSA 数字签名算法</h4><ul><li><p>由 RSA 数字签名算法逐一转成标准数字签名算法 DSA 算法</p></li><li><p>DSS (Digital Signature Standard) 数字签名标准</p></li><li><p>DSS 本质上是ElGamal 数字签名算法，DSS 使用的数字签名算法是 DSA 算法</p></li><li><p>与 RSA 不同的是，DSA 仅包含数字签名算法，使用 DSA 算法的数字证书无法进行加密通信，而 RSA 算法既包含数字签名算法，又包含加密/解密算法</p></li><li><p>仅包含 SHA 系列消息摘要算法, Java 6 仅支持  SHA1withDSA</p></li></ul><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>签名长度</th><th>备注</th></tr></thead><tbody><tr><td>SHA1withDSA、SHA224withDSA、SHA256withDSA、SHA384withDSA、SHA512withDSA、</td><td>512~1024位（密钥长度必须是 64 的倍数）</td><td>1024</td><td>长度不唯一，与密钥长度无关</td><td>Bouncy Castle实现</td></tr></tbody></table><ul><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DSAPrivateKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DSAPublicKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>X509EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DSASignatureCoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//密钥算法，用于构建签名验签中使用的密钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"DSA"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//签名算法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SIGNATURE_ALGORITHM <span class="token operator">=</span> <span class="token string">"SHA1withDSA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"DSAPublicKey"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"DSAPrivateKey"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Provider provider<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建签名验签密钥     *     * @param keySize  密钥长度(位)     * @param provider 提供者     * @return Map 密钥     * @throws NoSuchAlgorithmException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> keySize<span class="token punctuation">,</span> Provider provider<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DSASignatureCoder<span class="token punctuation">.</span>provider <span class="token operator">=</span> provider<span class="token punctuation">;</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>keySize<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSAPublicKey dsaPublicKey <span class="token operator">=</span> <span class="token punctuation">(</span>DSAPublicKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DSAPrivateKey dsaPrivateKey <span class="token operator">=</span> <span class="token punctuation">(</span>DSAPrivateKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span> dsaPublicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span> dsaPrivateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keyMap<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//私钥转换使用 PKCS8EncodedKeySpec 密钥材料</span>        PKCS8EncodedKeySpec pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化 密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥工厂使用私钥密钥材料生成私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>SIGNATURE_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公钥转换使用 X509EncodedKeySpec 密钥材料</span>        X509EncodedKeySpec x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化 密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥工厂使用公钥密钥材料生成公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>SIGNATURE_ALGORITHM<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>BouncyCastleProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Hex<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>Provider<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>SignatureException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>InvalidKeySpecException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DSASignatureCoderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Provider PROVIDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEY_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeySpecException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap <span class="token operator">=</span> DSASignatureCoder<span class="token punctuation">.</span><span class="token function">initKey</span><span class="token punctuation">(</span>KEY_SIZE<span class="token punctuation">,</span> PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pubKey <span class="token operator">=</span> DSASignatureCoder<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DSA 签名算法公钥 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>pubKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> priKey <span class="token operator">=</span> DSASignatureCoder<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DSA 签名算法私钥 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>priKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"DSA 数字签名算法"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待签名数据 : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign <span class="token operator">=</span> DSASignatureCoder<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> priKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签名值长度 : "</span> <span class="token operator">+</span> sign<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DSA 数字签名算法签名值 : "</span> <span class="token operator">+</span> Hex<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> status <span class="token operator">=</span> DSASignatureCoder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sign<span class="token punctuation">,</span> pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DSA 数字签名算法验签 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>status <span class="token operator">?</span> <span class="token string">"成功"</span> <span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试结果</span>DSA 签名算法公钥 <span class="token operator">:</span> MIIBuDCCASwGByqGSM44BAEwggEfAoGBAP1<span class="token operator">/</span>U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2USZpRV1AIlH7WT2NWPq<span class="token operator">/</span>xfW6MPbLm1Vs14E7gB00b<span class="token operator">/</span>JmYLdrmVClpJ<span class="token operator">+</span>f6AR7ECLCT7up1<span class="token operator">/</span>63xhv4O1fnxqimFQ8E<span class="token operator">+</span>4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmCouuEC<span class="token operator">/</span>BYHPUCgYEA9<span class="token operator">+</span>GghdabPd7LvKtcNrhXuXmUr7v6OuqC<span class="token operator">+</span>VdMCz0HgmdRWVeOutRZT<span class="token operator">+</span>ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN<span class="token operator">/</span>C<span class="token operator">/</span>ohNWLx<span class="token operator">+</span>2J6ASQ7zKTxvqhRkImog9<span class="token operator">/</span>hWuWfBpKLZl6Ae1UlZAFMO<span class="token operator">/</span>7PSSoDgYUAAoGBAIqlDyWkqhJPOTV7MZOvgOtE2I7yGlk5pP<span class="token operator">+</span><span class="token number">43</span><span class="token operator">/</span>DQYYwA6w52zD<span class="token operator">/</span>jsUt4UislPRguOqsmFlx1NoE8ARr7QFcEw0vbk3vqMQgHJ1JpgISFT<span class="token operator">/</span>pYSWOPWoa1vWoTyd1NIfiXn4uL<span class="token operator">/</span>Ef2SCnJBg<span class="token operator">/</span>hggAKPc2oVNc6Dt<span class="token operator">/</span>eBbs0I8lEvwFaDSA 签名算法私钥 <span class="token operator">:</span> MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAP1<span class="token operator">/</span>U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2USZpRV1AIlH7WT2NWPq<span class="token operator">/</span>xfW6MPbLm1Vs14E7gB00b<span class="token operator">/</span>JmYLdrmVClpJ<span class="token operator">+</span>f6AR7ECLCT7up1<span class="token operator">/</span>63xhv4O1fnxqimFQ8E<span class="token operator">+</span>4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmCouuEC<span class="token operator">/</span>BYHPUCgYEA9<span class="token operator">+</span>GghdabPd7LvKtcNrhXuXmUr7v6OuqC<span class="token operator">+</span>VdMCz0HgmdRWVeOutRZT<span class="token operator">+</span>ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN<span class="token operator">/</span>C<span class="token operator">/</span>ohNWLx<span class="token operator">+</span>2J6ASQ7zKTxvqhRkImog9<span class="token operator">/</span>hWuWfBpKLZl6Ae1UlZAFMO<span class="token operator">/</span>7PSSoEFgIUC3aukTzyuw9jjNQ77VIYic4d6IU<span class="token operator">=</span>待签名数据 <span class="token operator">:</span> DSA 数字签名算法签名值长度 <span class="token operator">:</span> <span class="token number">47</span>DSA 数字签名算法签名值 <span class="token operator">:</span> 302d021436f258cdb58194b5ed117eafaefa424bef9e127b02150088aa26264c69817fbcd9514cdcff2dce254d55e9DSA 数字签名算法验签 <span class="token operator">:</span> 成功</code></pre></li></ul><h4 id="8-3、ECDSA-数字签名算法"><a href="#8-3、ECDSA-数字签名算法" class="headerlink" title="8.3、ECDSA 数字签名算法"></a>8.3、ECDSA 数字签名算法</h4><ul><li><p>Elliptic Curve Digital Signature Algorithm 简称 ECDSA  椭圆曲线数字签名算法</p></li><li><p>优点：速度快、强度高、签名短</p></li><li><p>应用： 微软操作系统 25 位产品密钥用到 ECDSA，产品密钥就是签名的十六进制字符串表示形式</p></li><li><p>ECDSA 数字签名算法的密钥算法 ： ECDSA,密钥产生方式跟 RSA、DSA 类似</p></li><li><p>支持的算法：NONEwithECDSA、RIPEMD160withECDSA、SHA1withECDSA、SHA224withECDSA、SHA256withECDSA、SHA384withECDSA、SHA512withECDSA</p></li></ul><table><thead><tr><th>算法</th><th>密钥长度</th><th>密钥长度默认值</th><th>签名长度</th><th>备注</th></tr></thead><tbody><tr><td>NONEwithECDSA</td><td></td><td></td><td>128</td><td>Bouncy Castle 实现</td></tr><tr><td>RIPEMD160withECDSA</td><td></td><td></td><td>160</td><td>Bouncy Castle 实现</td></tr><tr><td>SHA1withECDSA</td><td></td><td></td><td>160</td><td>Bouncy Castle 实现</td></tr><tr><td>SHA224withECDSA</td><td></td><td></td><td>224</td><td>Bouncy Castle 实现</td></tr><tr><td>SHA256withECDSA</td><td></td><td></td><td>256</td><td>Bouncy Castle 实现</td></tr><tr><td>SHA384withECDSA</td><td></td><td></td><td>384</td><td>Bouncy Castle 实现</td></tr><tr><td>SHA512withECDSA</td><td></td><td></td><td>512</td><td>Bouncy Castle 实现</td></tr></tbody></table><ul><li><p>签名长度跟摘要算法长度相同</p></li><li><p>ECDSA 算法密钥生成仅能通过<code>算法材料</code>的方式产生</p></li><li><p>ECDSA 算法密钥生成示例</p></li></ul><h3 id="9、数字证书"><a href="#9、数字证书" class="headerlink" title="9、数字证书"></a>9、数字证书</h3><ul><li><p>数字证书集合了多种密码学算法：</p><ul><li>自身带有公钥信息，可完成相应的加密/解密操作。</li><li>带有数字签名，可鉴别消息来源</li><li>自身带有消息摘要信息，可验证证书的完整性。</li><li>证书本身含有用户的身份信息，因而具有认证性</li></ul></li><li><p>数字证书也叫电子证书，类似身份证，身份证由公安机关签发，而数字证书由数字证书颁发认证机构（Certificate Authority） CA 签发， 只有经过 CA  签发的证书在网络中才具备可认证性</p></li><li><p>国际权威数字证书颁发认证机构三巨头：</p><ul><li>VeriSign : <a href="http://www.verisign.com/">http://www.verisign.com</a></li><li>GeoTrust : <a href="http://www.geotrust.com/">http://www.geotrust.com</a></li><li>Thawte : <a href="http://www.thawte.com/">http://www.thawte.com</a></li></ul></li><li><p>免费的 CA 签发机构：</p><ul><li>由于国际权威机构申请证书费用和维护费用昂贵，所以出现了免费的数字签发机构 CAcert</li><li>CAcert :  <a href="http://www.cacert.org/">http://www.cacert.org/</a></li></ul></li><li><p>我国部分省份数字证书签发机构：</p><ul><li>北京市数字证书认证中心</li><li>安徽省数字证书认证中心</li><li>广东省电子商务认证中心</li></ul></li><li><p>数字证书签发过程实际是对申请数字证书的公钥做数字签名处理，证书的验证过程是对证书的公钥做验证签名，其中还包含证书的有效期验证</p></li><li><p>数字证书有多种文件编码格式，主要包含 <code>CER</code>编码、<code>DER</code>编码：</p><ul><li><p>CER 编码（Canonical Encoding Rules,规范编码格式），是 BER(Basic Encoding Rules,基本编码格式)的一个变种，比 BER 更严格</p></li><li><p>DER 编码（Distinguished Encoding Rules,卓越编码格式），同样是 BER 的一个变体，与 CER 不同的是，DER 使用定长模式，CER 使用变长模式</p></li><li><p>PKCS(Public-Key Cryptography Standards,公钥加密标准)，常用主要有：PKCS#7、PKCS#10、PKCS#12</p><ul><li>PKCS 常用标准</li></ul></li></ul></li></ul><table><thead><tr><th>公钥加密标准</th><th>描述信息</th><th>文件名后缀</th></tr></thead><tbody><tr><td>PKCS#7</td><td>密码消息语法标准</td><td>.p7b、.p7c</td></tr><tr><td>PKCS#10</td><td>证书请求语法标准</td><td>.p10、.csr</td></tr><tr><td>PKCS#12</td><td>个人信息交换语法标准</td><td>.p12、.pfx</td></tr></tbody></table><p>PKCS#10 文件用于证书签发申请，一般证书申请请求看到 .csr后缀</p><p>PKCS#12 文件可作为 Java 种的密钥库或信任库直接使用</p><p>通常使用 Base64 编码格式作为数字证书文件存储格式</p><h4 id="9-1、模型分析"><a href="#9-1、模型分析" class="headerlink" title="9.1、模型分析"></a>9.1、模型分析</h4><ul><li>实际运用，很多数字签名属于自签名，即证书申请者为自己的证书签名（证书签发模型）</li></ul><pre class=" language-shell"><code class="language-shell">    证书申请者 ->> 证书申请者 :  1、构建密钥对    证书申请者 ->> 认证机构 :  2、发送算法、公钥和申请者部分信息    认证机构 ->> 认证机构 :  3、核实用户身份    认证机构 ->> 证书申请者 :  4、颁发数字证书</code></pre><ul><li><p>如果认证机构是证书申请者自身，该数字证书是自签发证书</p></li><li><p>加密交互模型</p><ul><li>客户端获得服务器下发的数字证书后，即可使用数字证书进行加密交互</li><li>客户端请求服务器端模型</li></ul></li></ul><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram    客户端 --> 服务器端 :  客户端请求服务器端模型    客户端 ->> 客户端 :  1、使用公钥加密数据    客户端 ->> 服务器端 :  2、发送加密数据    服务器端 ->> 服务器端 :  3、使用私钥对加密数据解密</code></pre><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram    客户端 --> 服务器端 :  服务器端响应客户端模型    服务器端 ->> 服务器端 :  1、使用私钥对带加密数据签名    服务器端 ->> 服务器端 :  2、使用私钥对数据加密    服务器端 -->> 客户端 :  3、回应加密数据、数字签名    客户端 ->> 客户端 : 4、使用公钥对数据解密    客户端 ->> 客户端 : 4、使用公钥和解密数据验证签名</code></pre><h4 id="9-2、KeyTool-证书管理"><a href="#9-2、KeyTool-证书管理" class="headerlink" title="9.2、KeyTool 证书管理"></a>9.2、KeyTool 证书管理</h4><ul><li><p>数字证书管理工具 ：</p><ul><li>keytool :<ul><li>jdk 自带的，用于数字证书的<code>申请</code>、<code>导入</code>、<code>导出</code>和<code>撤销</code>等操作</li><li>keytool 与本地密钥库相关联，将私钥存于密钥库，公钥则以数字证书输出</li><li>keytool 位于 %JAVA_HOME%\bin 目录下</li><li>opnessl</li></ul></li></ul></li><li><p>流程：使用数字证书管理工具构建 CSR (Certificate Signing Request,数字证书签发请求)，交由 CA 机构签发，形成最终的数字证书</p></li></ul><h5 id="9-2-1、构建自签发数字证书"><a href="#9-2-1、构建自签发数字证书" class="headerlink" title="9.2.1、构建自签发数字证书"></a>9.2.1、构建自签发数字证书</h5><ul><li><p>申请数字证书之前，需要在密钥库（keystore）中以别名的方式生成本地数字证书，建立相应的加密算法、密钥、证书有效期等，同时需要提供用户的身份信息，可以为自己签发一个数字证书</p></li><li><p>以 “<a href="http://www.zlex.org&quot;/">www.zlex.org&quot;</a> 作为别名，RSA 为密钥算法、规定密钥长度为 2048位 、指定 SHA1withRSA 作为签名算法、签发有效期 3600天</p><pre class=" language-shell"><code class="language-shell">C:\Program Files\Java\jdk1.8.0_181\bin>keytool -genkeypair -alias www.zlex.org -keyalg RSA -keysize 2048 -sigalg SHA1withRSA -validity 3600 -keystore zlex.keystore输入密钥库口令:再次输入新口令:# 以下是签发证书时输入用户身份信息您的名字与姓氏是什么?  [Unknown]:  www.zlex.org您的组织单位名称是什么?  [Unknown]:  zlex您的组织名称是什么?  [Unknown]:  zlex您所在的城市或区域名称是什么?  [Unknown]:  BJ您所在的省/市/自治区名称是什么?  [Unknown]:  BJ该单位的双字母国家/地区代码是什么?  [Unknown]:  CNCN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN是否正确?  [否]:  y输入 <www.zlex.org> 的密钥口令        (如果和密钥库口令相同, 按回车):Warning:JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore zlex.keystore -destkeystore zlex.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。##############################################选项: -genkeypair                     生成密钥对 -alias <alias>                  要处理的条目的别名,这里是 www.zlex.org -keyalg <keyalg>                密钥算法名称 RSA -keysize <keysize>              密钥位大小 2048 -sigalg <sigalg>                签名算法名称 -destalias <destalias>          目标别名 -dname <dname>                  唯一判别名 -startdate <startdate>          证书有效期开始日期/时间 -ext <value>                    X.509 扩展 -validity <valDays>             有效天数,指定证书的有效期，这里是 3600天 -keypass <arg>                  密钥口令 -keystore <keystore>            密钥库名称，密钥库存储位置，这里名称是zlex.keystore，默认在 %JAVA_HOME%\bin 目录下 -storepass <arg>                密钥库口令 -storetype <storetype>          密钥库类型 -providername <providername>    提供方名称 -providerclass <providerclass>  提供方类名 -providerarg <arg>              提供方参数 -providerpath <pathlist>        提供方类路径 -v                              详细输出 -protected                      通过受保护的机制的口令  ############################################## 您的名字与姓氏是什么?  [Unknown]:  www.zlex.org CN=www.zlex.org, OU=zlex, O=BJ, L=BJ, ST=BJ, C=CN 这里的 CN=www.zlex.org、[Unknown]:  www.zlex.org 表示的是网络环境中的用户个体，一般指主机ip、域名等  ############################################## 也可以使用 -dname 指定用户信息，代替上面的手动输入用户身份信息 keytool -genkeypair -alias www.zlex.org -keyalg RSA -keysize 2048 -sigalg SHA1withRSA -validity 3600 -keystore zlex.keystore -dname "CN=www.zlex.org, OU=zlex, O=BJ, L=BJ, ST=BJ, C=CN"  #结果 C:\Program Files\Java\jdk1.8.0_181\bin>keytool -genkeypair -alias www.zlex.org -keyalg RSA -keysize 2048 -sigalg SHA1withRSA -validity 3600 -keystore zlex.keystore -dname "CN=www.zlex.org, OU=zlex, O=BJ, L=BJ, ST=BJ, C=CN"输入密钥库口令:再次输入新口令:输入 <www.zlex.org> 的密钥口令        (如果和密钥库口令相同, 按回车):Warning:JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore zlex.keystore -destkeystore zlex.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。</code></pre></li><li><p>导出证书</p><ul><li>将数字证书导出进行加密交互</li></ul><pre class=" language-shell"><code class="language-shell">C:\Program Files\Java\jdk1.8.0_181\bin>keytool -help密钥和证书管理工具    命令:     -certreq            生成证书请求 -changealias        更改条目的别名 -delete             删除条目 -exportcert         导出证书 -genkeypair         生成密钥对 -genseckey          生成密钥 -gencert            根据证书请求生成证书 -importcert         导入证书或证书链 -importpass         导入口令 -importkeystore     从其他密钥库导入一个或所有条目 -keypasswd          更改条目的密钥口令 -list               列出密钥库中的条目 -printcert          打印证书内容 -printcertreq       打印证书请求的内容 -printcrl           打印 CRL 文件的内容 -storepasswd        更改密钥库的存储口令    使用 "keytool -command_name -help" 获取 command_name 的用法    C:\Program Files\Java\jdk1.8.0_181\bin>keytool -exportcert -helpkeytool -exportcert [OPTION]...    导出证书    选项:     -rfc                            以 RFC 样式输出 (Base64) -alias <alias>                  要处理的条目的别名 -file <filename>                输出文件名 -keystore <keystore>            密钥库名称 -storepass <arg>                密钥库口令 -storetype <storetype>          密钥库类型 -providername <providername>    提供方名称 -providerclass <providerclass>  提供方类名 -providerarg <arg>              提供方参数 -providerpath <pathlist>        提供方类路径 -v                              详细输出 -protected                      通过受保护的机制的口令    使用 "keytool -help" 获取所有可用命令        C:\Program Files\Java\jdk1.8.0_181\bin>keytool -exportcert -alias www.zlex.org -keystore zlex.keystore -file zlex.cer -rfc -storepass 123456存储在文件 <zlex.cer> 中的证书    Warning:JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore zlex.keystore -destkeystore zlex.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。    ##############################################打印数字证书信息C:\Program Files\Java\jdk1.8.0_181\bin>keytool -printcert -v -file zlex.cer所有者: CN=www.zlex.org, OU=zlex, O=BJ, L=BJ, ST=BJ, C=CN发布者: CN=www.zlex.org, OU=zlex, O=BJ, L=BJ, ST=BJ, C=CN序列号: 12179a60有效期为 Wed Sep 16 15:16:53 CST 2020 至 Fri Jul 26 15:16:53 CST 2030证书指纹:         MD5:  91:40:19:72:12:A3:EB:5C:3B:A4:DC:0E:95:9A:03:C5         SHA1: 6C:5C:62:01:36:27:FD:49:F6:A3:FE:90:A8:34:00:23:45:15:3A:80         SHA256: 55:3E:7B:CB:89:BA:D6:14:9B:9D:2A:AC:FC:AD:5A:AC:12:DD:F5:35:4F:9E:ED:D5:BF:96:4A:D2:FF:0E:3A:56签名算法名称: SHA1withRSA主体公共密钥算法: 2048 位 RSA 密钥版本: 3    扩展:    #1: ObjectId: 2.5.29.14 Criticality=falseSubjectKeyIdentifier [KeyIdentifier [0000: 76 2F C5 99 32 05 03 62   E0 22 62 DF C1 C7 C6 EF  v/..2..b."b.....0010: 2C 88 8A 23                                        ,..#]]# 自签发证书，X.509 第三版本类型的根证书</code></pre></li></ul><h5 id="9-2-2、构建-CA-数字证书"><a href="#9-2-2、构建-CA-数字证书" class="headerlink" title="9.2.2、构建 CA 数字证书"></a>9.2.2、构建 CA 数字证书</h5><ul><li><p>如果要获得 CA 机构认证的数字证书，需要将数字证书签发申请（CSR）导出，经由 CA 机构认证并颁发，同时将认证后的数字证书导入本地密钥库和信任库</p><ul><li>从已存在的 keystore 文件导出数字证书签发申请</li></ul><pre class=" language-shell"><code class="language-shell">C:\Program Files\Java\jdk1.8.0_181\bin>keytool -certreq -alias www.zlex.org -keystore zlex.keystore -file zlex.csr -v输入密钥库口令:存储在文件 <zlex.csr> 中的认证请求将此提交给您的 CA    Warning:JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore zlex.keystore -destkeystore zlex.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。    C:\Program Files\Java\jdk1.8.0_181\bin>keytool -certreq -helpkeytool -certreq [OPTION]...    生成证书请求    选项:     -alias <alias>                  要处理的条目的别名 -sigalg <sigalg>                签名算法名称 -file <filename>                输出文件名 -keypass <arg>                  密钥口令 -keystore <keystore>            密钥库名称 -dname <dname>                  唯一判别名 -storepass <arg>                密钥库口令 -storetype <storetype>          密钥库类型 -providername <providername>    提供方名称 -providerclass <providerclass>  提供方类名 -providerarg <arg>              提供方参数 -providerpath <pathlist>        提供方类路径 -v                              详细输出 -protected                      通过受保护的机制的口令    从已存在的 zlex.keystore 导出证书签发申请使用 "keytool -help" 获取所有可用命令    ##############################################获得数字证书签发申请文件 zlex.csr 后，到 http://www.cacert.org/ 签发数字证书##############################################    获得 CA 签发的证书后，将其导入信任库，假设 获得的 CA 证书为 cazlex.cerkeytool -importcert [OPTION]...    导入证书或证书链    选项:     -noprompt                       不提示 -trustcacerts                   信任来自 cacerts 的证书 -protected                      通过受保护的机制的口令 -alias <alias>                  要处理的条目的别名 -file <filename>                输入文件名 -keypass <arg>                  密钥口令 -keystore <keystore>            密钥库名称 -storepass <arg>                密钥库口令 -storetype <storetype>          密钥库类型 -providername <providername>    提供方名称 -providerclass <providerclass>  提供方类名 -providerarg <arg>              提供方参数 -providerpath <pathlist>        提供方类路径 -v                              详细输出          keytool -importcert -trustcacerts -alias www.zlex.org -file cazlex.cer -keystore zlex.keystore ##############################################导入数字证书后，查看数字证书keytool -list -alias www.zlex.org -keystore zlex.keystore</code></pre><h4 id="9-3、OpenSSL-证书管理"><a href="#9-3、OpenSSL-证书管理" class="headerlink" title="9.3、OpenSSL 证书管理"></a>9.3、OpenSSL 证书管理</h4></li><li><p>Open SSL （<a href="http://www.openssl.org/%EF%BC%89%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%BA%86">http://www.openssl.org/）开放源码软件包，实现了</a> SSL 及相关加密技术</p></li><li><p>比 Keytool 强大，可用于根证书、服务器证书和客户端证书管理，可参考：<a href="http://www.openssl.org/docs/apps/openssl.html">http://www.openssl.org/docs/apps/openssl.html</a></p></li></ul><h5 id="9-3-1、构建根证书"><a href="#9-3-1、构建根证书" class="headerlink" title="9.3.1、构建根证书"></a>9.3.1、构建根证书</h5><ul><li><p>OpenSSL 命令</p><pre class=" language-shell"><code class="language-shell">    # OpenSSL 命令        Standard commands    asn1parse         ca                ciphers           cms    crl               crl2pkcs7         dgst              dhparam    dsa               dsaparam          ec                ecparam    enc               engine            errstr            gendsa    genpkey           genrsa            help              list    nseq              ocsp              passwd            pkcs12    pkcs7             pkcs8             pkey              pkeyparam    pkeyutl           prime             rand              rehash    req               rsa               rsautl            s_client    s_server          s_time            sess_id           smime    speed             spkac             srp               storeutl    ts                verify            version           x509        Message Digest commands (see the `dgst' command for more details)    blake2b512        blake2s256        gost              md4    md5               mdc2              rmd160            sha1    sha224            sha256            sha3-224          sha3-256    sha3-384          sha3-512          sha384            sha512    sha512-224        sha512-256        shake128          shake256    sm3        Cipher commands (see the `enc' command for more details)    aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb    aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb    aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb    aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1    aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb    aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8    aria-256-ctr      aria-256-ecb      aria-256-ofb      base64    bf                bf-cbc            bf-cfb            bf-ecb    bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc    camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast    cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb    cast5-ofb         des               des-cbc           des-cfb    des-ecb           des-ede           des-ede-cbc       des-ede-cfb    des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb    des-ede3-ofb      des-ofb           des3              desx    idea              idea-cbc          idea-cfb          idea-ecb    idea-ofb          rc2               rc2-40-cbc        rc2-64-cbc    rc2-cbc           rc2-cfb           rc2-ecb           rc2-ofb    rc4               rc4-40            seed              seed-cbc    seed-cfb          seed-ecb          seed-ofb          sm4-cbc    sm4-cfb           sm4-ctr           sm4-ecb           sm4-ofb</code></pre></li><li><p>构建根证书之前，需要构建随机数文件</p><pre class=" language-shell"><code class="language-shell">OpenSSL> rand -out E:\CA\private\.rand 1000rand 生成随机数命令-out 输出文件路径</code></pre></li><li><p>根证书</p><ul><li>OpenSSL 通常使用 PEM（Privacy Enbanced Mail 隐私增强邮件）编码格式保存私钥</li></ul><pre class=" language-shell"><code class="language-shell"> ################ 构建根证书私钥 OpenSSL> genrsa -aes256 -out E:\CA\private\ca.key.pem 2048 Generating RSA private key, 2048 bit long modulus (2 primes) ..............................................................+++++ .....................+++++ e is 65537 (0x010001) Enter pass phrase for E:\CA\private\ca.key.pem: Verifying - Enter pass phrase for E:\CA\private\ca.key.pem:  # 密码是 123456 # genrsa 产生 RSA 密钥的命令 # -aes256 使用 AES 算法对产生的私钥加密，可选算法包括 DES、DESede、IDEA、AES等对称密钥算法 # 2048 指生成的 RSA 密钥长度，默认 512  ################ 生成根证书签发申请 OpenSSL> req -new -key E:\CA\private\ca.key.pem -rand E:\CA\private\.rand -out E:\CA\private\ca.csr Enter pass phrase for E:\CA\private\ca.key.pem: Can't load ./.rnd into RNG 4124:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto\rand\randfile.c:88:Filename=./.rnd You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:CN State or Province Name (full name) [Some-State]:GD Locality Name (eg, city) []:GZ Organization Name (eg, company) [Internet Widgits Pty Ltd]:KY Organizational Unit Name (eg, section) []:KY Common Name (e.g. server FQDN or YOUR name) []:www.zlex.org Email Address []:  Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: # 结果，生成 ca.csr 文件 # req 产生证书签发申请命令 # -new 表示新请求 # -key 表示私钥 这里是 ca.key.pem # -out 表示文件输出路径 -----BEGIN CERTIFICATE REQUEST----- MIICnTCCAYUCAQAwWDELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQH DAJHWjELMAkGA1UECgwCS1kxCzAJBgNVBAsMAktZMRUwEwYDVQQDDAx3d3cuemxl eC5vcmcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDgGdcVL4lk+5/Q xOSdL/zQK2yv9WsAchm9ELShgI9X2pTLvWJJ4YvsKq6JC4R6Fuy58dgb9t7A3kIP 8yS5LXKJ6SQILx5jHZcmWcaUsF7mCUBQ22RoQyCrr+5eMNj7cHrM66jnHJ+mY29B MEFSU/C9BEa4OHWjGu13+7kKTXGLYkHZzv/lzhEITuBCirGgtFrlXDbRg/PBZMwV h3JxWmmatlJOeMos25Mwuj5rgmnrC8lCZIfDBbJbegjo1gPD6byAinpcDBw7sH+Y CBgnH8I15L5C3sNouePjxxCg7naaQcZFZM3YWfN+iq4Vwf8xBekeDOKfc69XHg2r biojN4B3AgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEABoRmgwGvKM8WsCAKeL/k yU3MPgnZcrCWUubdIohabma359NbklvJFfPXIF0Cmabz8XqmrnE8Cv26qmyM97UV AA8RZ8VxWDsR+mPJbfQBhJUxBIL2mHIuNHZE5LX1vdc5yQZtKzrNNLji0OG+aD4i 6hH34xEN8pS7UII3rVuzNQHciD323HCrqSI5/clE/bBQGMg5razA/a/FYGLsnj5e 0iWa9e3YMSsx1mbXsnNKdkODi0JIrOxB85jOiQ/Aiw9F6RI4Awm2NXhghCkDvjre fOD64Ziq2xopR/f4/CuXzTDdx9Orton3qr9KZ9M0n2rAGpYSCNGym5hpYpH5SLuU 7g== -----END CERTIFICATE REQUEST-----  ################ 签发根证书 OpenSSL> x509 -req -days 1000 -sha1 -extensions v3_ca -signkey E:\CA\private\ca.key.pem -in E:\CA\private\ca.csr -out E:\CA\private\ca.cer Signature ok subject=C = CN, ST = GD, L = GZ, O = KY, OU = KY, CN = www.zlex.org Getting Private key Enter pass phrase for E:\CA\private\ca.key.pem:  # 结果，生成 ca.cer 文件 # x509 表示签发 X.509 格式证书的命令 # -req 表示证书输入请求 # -days 表示有效天数 # -sha1 表示摘要算法 # -extensions 表示按 OpenSSL 配置文件 v3_ca 项添加扩展 # -signkey 表示自签名密钥 # -in 表示输入文件，这里指证书签发申请文件 # -out 表示输出文件，这里指签发的证书 -----BEGIN CERTIFICATE----- MIIDNzCCAh8CFG9We9ZE4lOozFvvXN+LyTBVU6SEMA0GCSqGSIb3DQEBBQUAMFgx CzAJBgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCR1oxCzAJBgNVBAoM AktZMQswCQYDVQQLDAJLWTEVMBMGA1UEAwwMd3d3LnpsZXgub3JnMB4XDTIwMDkx NjA4NTc1NFoXDTIzMDYxMzA4NTc1NFowWDELMAkGA1UEBhMCQ04xCzAJBgNVBAgM AkdEMQswCQYDVQQHDAJHWjELMAkGA1UECgwCS1kxCzAJBgNVBAsMAktZMRUwEwYD VQQDDAx3d3cuemxleC5vcmcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB AQDgGdcVL4lk+5/QxOSdL/zQK2yv9WsAchm9ELShgI9X2pTLvWJJ4YvsKq6JC4R6 Fuy58dgb9t7A3kIP8yS5LXKJ6SQILx5jHZcmWcaUsF7mCUBQ22RoQyCrr+5eMNj7 cHrM66jnHJ+mY29BMEFSU/C9BEa4OHWjGu13+7kKTXGLYkHZzv/lzhEITuBCirGg tFrlXDbRg/PBZMwVh3JxWmmatlJOeMos25Mwuj5rgmnrC8lCZIfDBbJbegjo1gPD 6byAinpcDBw7sH+YCBgnH8I15L5C3sNouePjxxCg7naaQcZFZM3YWfN+iq4Vwf8x BekeDOKfc69XHg2rbiojN4B3AgMBAAEwDQYJKoZIhvcNAQEFBQADggEBAFTU8MBE X/LFrdC/Dpe51Ll5AkXeG+/kpLmaHvK6sGTSz5+FjDzl9I53gQlVrQKh+5lAoAG2 th4GNbq2L+Wpobc6jlOEBEka+m3nJrCcfOb5zjJHn4n8Pga0vFyNMbejNBEwkJG8 H8z02VzIzWyKnVXPWNwQaNrbBzj7oGS8wCSN7PbyPQUCh9bJONwGLnK/xHA6g94f kj6QGcVNG7JdgyMTmg71VTlwBMnRZZNQxB2//XsSEPBccf7B2h7CZRPYUAglzPFs SHGN5/vPkBh4j2BWy2RTK99FNK1nlTrhuW8l8FwAyA+/N1ZzMj2MwGDqWt0L28Xr jo6RVKw8UZvnyWE= -----END CERTIFICATE-----  ################ 证书格式转换 OpenSSL 产生的数字证书不能在 Java 中直接使用，需要转换成 PKCS#12 编码格式  OpenSSL> pkcs12 -export -cacerts -inkey E:\CA\private\ca.key.pem -in E:\CA\private\ca.cer -out  E:\CA\private\ca.p12 Enter pass phrase for E:\CA\private\ca.key.pem: Enter Export Password: Verifying - Enter Export Password: 123456  # pkcs12  PKCS#12编码格式证书命令 # -export  导出证书 # -cacerts 表示仅导出 CA 证书 # -inkey 表示输入密钥 # -in 表示输入文件，这里指根证书的 cer 格式 # -out 表示输出文件，这里指根证书的 PKCS#7 格式   ################ 使用 keytool 查看 ca.p12 C:\Program Files\Java\jdk1.8.0_181\bin>keytool -list -keystore E:\CA\private\ca.p12 -storetype pkcs12 -v -storepass 123456 密钥库类型: PKCS12 密钥库提供方: SunJSSE  您的密钥库包含 1 个条目  别名: 1 创建日期: 2020-9-16 条目类型: PrivateKeyEntry 证书链长度: 1 证书[1]: 所有者: CN=www.zlex.org, OU=KY, O=KY, L=GZ, ST=GD, C=CN 发布者: CN=www.zlex.org, OU=KY, O=KY, L=GZ, ST=GD, C=CN 序列号: 6f567bd644e253a8cc5bef5cdf8bc9305553a484 有效期为 Wed Sep 16 16:57:54 CST 2020 至 Tue Jun 13 16:57:54 CST 2023 证书指纹:        MD5:  25:AB:E4:BE:2A:0C:D3:3D:3F:A4:DA:37:26:36:BF:34        SHA1: 9A:F1:AE:2A:85:50:23:79:7E:8A:95:89:BD:A6:E1:65:AE:EE:AE:48        SHA256: E0:B9:5B:23:2F:26:85:B7:D8:0E:68:AD:46:09:81:4E:0B:DF:18:6D:37:FE:B0:DC:0B:CE:6F:6B:A4:0C:1B:79 签名算法名称: SHA1withRSA 主体公共密钥算法: 2048 位 RSA 密钥 版本: 1   ******************************************* *******************************************</code></pre></li></ul><h5 id="9-3-2、使用根证书签发服务器证书"><a href="#9-3-2、使用根证书签发服务器证书" class="headerlink" title="9.3.2、使用根证书签发服务器证书"></a>9.3.2、使用根证书签发服务器证书</h5><ul><li><p>构建服务器证书跟根证书类似</p><pre class=" language-shell"><code class="language-shell">################ 构建私钥OpenSSL> genrsa -aes256 -out E:\CA\private\server.key.pem 2048Generating RSA private key, 2048 bit long modulus (2 primes)........................+++++...................................+++++e is 65537 (0x010001)Enter pass phrase for E:\CA\private\server.key.pem:Verifying - Enter pass phrase for E:\CA\private\server.key.pem:################ 生成服务器证书签发申请OpenSSL> req -new -key E:\CA\private\server.key.pem -out E:\CA\private\server.csrEnter pass phrase for E:\CA\private\server.key.pem:Can't load ./.rnd into RNG10968:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto\rand\randfile.c:88:Filename=./.rndYou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [AU]:CNState or Province Name (full name) [Some-State]:GDLocality Name (eg, city) []:GZOrganization Name (eg, company) [Internet Widgits Pty Ltd]:KYOrganizational Unit Name (eg, section) []:KYCommon Name (e.g. server FQDN or YOUR name) []:www.zlex.orgEmail Address []:Please enter the following 'extra' attributesto be sent with your certificate requestA challenge password []:An optional company name []:################ 签发服务器证书OpenSSL> x509 -req -days 1000 -sha1 -extensions v3_req -CA E:\CA\private\ca.cer -CAkey E:\CA\private\ca.key.pem -CAserial ca.srl -CAcreateserial -in E:\CA\private\server.csr -out E:\CA\private\server.cerSignature oksubject=C = CN, ST = GD, L = GZ, O = KY, OU = KY, CN = www.zlex.orgGetting CA Private KeyEnter pass phrase for E:\CA\private\ca.key.pem: 123456# x509 表示签发 X.509 格式证书的命令# -req 表示证书输入请求# -days 表示有效天数# -sha1 表示摘要算法# -extensions 表示按 OpenSSL 配置文件 v3_ca 项添加扩展# -CA 表示 CA 证书，这里是 E:\CA\private\ca.cer（根证书）# -CAkey 表示 CA 证书密钥，这里是E:\CA\private\ca.key.pem（根证书密钥）# -CAserial 表示 CA 证书序列号文件# -CAcreateserial 表示创建 CA 证书序列号# -signkey 表示自签名密钥# -in 表示输入文件，这里指证书签发申请文件# -out 表示输出文件，这里指签发的证书################ 服务器证书格式转换OpenSSL> pkcs12 -export -clcerts -inkey E:\CA\private\server.key.pem -in E:\CA\private\server.cer -out  E:\CA\private\server.p12Enter pass phrase for E:\CA\private\server.key.pem:Enter Export Password:Verifying - Enter Export Password: 123456# pkcs12  PKCS#12编码格式证书命令# -export  导出证书# -clcerts 表示仅导出客户端证书# -inkey 表示输入密钥# -in 表示输入文件，这里指根证书的 cer 格式# -out 表示输出文件，这里指根证书的 PKCS#7 格式这样就可以实现单向认证</code></pre><h5 id="9-3-3、使用根证书签发客户端证书"><a href="#9-3-3、使用根证书签发客户端证书" class="headerlink" title="9.3.3、使用根证书签发客户端证书"></a>9.3.3、使用根证书签发客户端证书</h5></li></ul><pre class=" language-shell"><code class="language-shell">  ################ 构建私钥  genrsa -aes256 -out E:\CA\private\client.key.pem 2048    ################ 生成客户端证书签发申请  OpenSSL> req -new -key E:\CA\private\client.key.pem -out E:\CA\private\client.csr  Enter pass phrase for E:\CA\private\client.key.pem:  Can't load ./.rnd into RNG  6704:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto\rand\randfile.c:88:Filename=./.rnd  You are about to be asked to enter information that will be incorporated  into your certificate request.  What you are about to enter is what is called a Distinguished Name or a DN.  There are quite a few fields but you can leave some blank  For some fields there will be a default value,  If you enter '.', the field will be left blank.  -----  Country Name (2 letter code) [AU]:CN  State or Province Name (full name) [Some-State]:GD  Locality Name (eg, city) []:GZ  Organization Name (eg, company) [Internet Widgits Pty Ltd]:KY  Organizational Unit Name (eg, section) []:KY  Common Name (e.g. server FQDN or YOUR name) []:www.zlex.org  Email Address []:    Please enter the following 'extra' attributes  to be sent with your certificate request  A challenge password []:  An optional company name []:    ################ 签发客户端证书</code></pre><h4 id="9-4、证书的使用"><a href="#9-4、证书的使用" class="headerlink" title="9.4、证书的使用"></a>9.4、证书的使用</h4><ul><li><p>Java 6 提供了完善的数字证书管理实现，我们几乎无需关注相关的具体算法，仅通过操作密钥库和数字证书就可完成相应的加密/解密和签名/验签操作。密钥库管理私钥，数字证书管理公钥，私钥和密钥分属消息传递两方，进行消息加密传递</p></li><li><p>依据上面，密钥库看作私钥的相关操作入口，数字证书看作公钥的相关操作入口</p></li><li><p>以 Keytool 产生的密钥库和数字证书为例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加载密钥库</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>KeyStore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>KeyStoreException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CertificateCoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加载密钥库，需要密钥库文件路径和密钥库密码     * @param keyStorePath 密钥库文件路径     * @param password 密钥库密码     * @return &amp;#123;@link KeyStore&amp;#125; 密钥库     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> KeyStore <span class="token function">getKeyStore</span><span class="token punctuation">(</span>String keyStorePath<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> KeyStoreException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 keystore 对象， KeyStore.getDefaultType() 是可以改变的</span>        KeyStore keyStore <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KeyStore<span class="token punctuation">.</span><span class="token function">getDefaultType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>keyStorePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span>password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keyStore<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载密钥库后，就能通过相关的方法获得私钥，也可以获得数字证书</span><span class="token comment" spellcheck="true">//由密钥库获得私钥</span><span class="token keyword">public</span> PrivateKey <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>String alias<span class="token punctuation">,</span>String keyStorePath<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得密钥库</span>        KeyStore keyStore <span class="token operator">=</span> <span class="token function">getKeyStore</span><span class="token punctuation">(</span>keyStorePath<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获得私钥</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>PrivateKey<span class="token punctuation">)</span> keyStore<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span>password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得私钥后就可以执行私钥加密、私钥解密等操作</span><span class="token comment" spellcheck="true">//如果需要从密钥库中获得签名算法，只能通过由密钥库中获取的数字证书并强转为 X509Certificate 实例，再通过 getSigAlgName() 获得对应的签名算法</span><span class="token keyword">public</span> Signature <span class="token function">getSignature</span><span class="token punctuation">(</span>String alias<span class="token punctuation">,</span> String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得密钥库</span>        KeyStore keyStore <span class="token operator">=</span> <span class="token function">getKeyStore</span><span class="token punctuation">(</span>keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得证书</span>        X509Certificate x509Certificate <span class="token operator">=</span> <span class="token punctuation">(</span>X509Certificate<span class="token punctuation">)</span> keyStore<span class="token punctuation">.</span><span class="token function">getCertificate</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建签名，由签名证书指定签名算法</span>        <span class="token keyword">return</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>x509Certificate<span class="token punctuation">.</span><span class="token function">getSigAlgName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过以上操作，就可以使用私钥进行签名操作了</span><span class="token comment" spellcheck="true">//相比于密钥库操作，数字证书的操作更为简单，只需要给出数字证书的路径并加载它就可以</span><span class="token comment" spellcheck="true">//加载数字证书</span><span class="token keyword">public</span> <span class="token keyword">static</span> Certificate <span class="token function">getCertificate</span><span class="token punctuation">(</span>String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化证书工厂，证书类型 : X.509</span>        CertificateFactory certificateFactory <span class="token operator">=</span> CertificateFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> certificateFactory<span class="token punctuation">.</span><span class="token function">generateCertificate</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Java 6 仅支持 X.509 类型证书，通过证书可以获得公钥</span><span class="token comment" spellcheck="true">//由数字证书获得公钥</span><span class="token keyword">public</span> PublicKey <span class="token function">getPublicKey</span><span class="token punctuation">(</span>String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得证书</span>        Certificate certificate <span class="token operator">=</span> <span class="token function">getCertificate</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从证书获得公钥</span>        <span class="token keyword">return</span> certificate<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得公钥后就可以执行公钥加密、公钥解密操作</span><span class="token comment" spellcheck="true">//如果使用数字证书进行验证签名操作时，需要将获得的证书对象强转为 X509Certificate 实例</span><span class="token comment" spellcheck="true">//完整代码</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>Certificate<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>X509Certificate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CertificateCoder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CERT_TYPE <span class="token operator">=</span> <span class="token string">"X.509"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加载密钥库，需要密钥库文件路径和密钥库密码     *     * @param keyStorePath 密钥库文件路径     * @param password     密钥库密码     * @return &amp;#123;@link KeyStore&amp;#125; 密钥库     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> KeyStore <span class="token function">getKeyStore</span><span class="token punctuation">(</span>String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> KeyStoreException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> UnrecoverableKeyException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化 keystore 对象， KeyStore.getDefaultType() 是可以改变的</span>        KeyStore keyStore <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KeyStore<span class="token punctuation">.</span><span class="token function">getDefaultType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>keyStorePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span> password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keyStore<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PrivateKey <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>String alias<span class="token punctuation">,</span> String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得密钥库</span>        KeyStore keyStore <span class="token operator">=</span> <span class="token function">getKeyStore</span><span class="token punctuation">(</span>keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得私钥</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>PrivateKey<span class="token punctuation">)</span> keyStore<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Signature <span class="token function">getSignature</span><span class="token punctuation">(</span>String alias<span class="token punctuation">,</span> String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得密钥库</span>        KeyStore keyStore <span class="token operator">=</span> <span class="token function">getKeyStore</span><span class="token punctuation">(</span>keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得证书</span>        X509Certificate x509Certificate <span class="token operator">=</span> <span class="token punctuation">(</span>X509Certificate<span class="token punctuation">)</span> keyStore<span class="token punctuation">.</span><span class="token function">getCertificate</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建签名，由签名证书指定签名算法</span>        <span class="token keyword">return</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>x509Certificate<span class="token punctuation">.</span><span class="token function">getSigAlgName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Certificate <span class="token function">getCertificate</span><span class="token punctuation">(</span>String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化证书工厂，证书类型 : X.509</span>        CertificateFactory certificateFactory <span class="token operator">=</span> CertificateFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>CERT_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        Certificate certificate <span class="token operator">=</span> certificateFactory<span class="token punctuation">.</span><span class="token function">generateCertificate</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> certificate<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PublicKey <span class="token function">getPublicKey</span><span class="token punctuation">(</span>String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得证书</span>        Certificate certificate <span class="token operator">=</span> <span class="token function">getCertificate</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从证书获得公钥</span>        <span class="token keyword">return</span> certificate<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Signature <span class="token function">getVerifySignature</span><span class="token punctuation">(</span>String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得证书</span>        X509Certificate x509Certificate <span class="token operator">=</span> <span class="token punctuation">(</span>X509Certificate<span class="token punctuation">)</span> <span class="token function">getCertificate</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由证书构建签名</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>x509Certificate<span class="token punctuation">.</span><span class="token function">getSigAlgName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由证书初始化签名，实际上使用了证书中的公钥</span>        signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>x509Certificate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> String alias<span class="token punctuation">,</span> String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">,</span> String alias<span class="token punctuation">,</span> String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText<span class="token punctuation">,</span> String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> String alias<span class="token punctuation">,</span> String keyStorePath<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException<span class="token punctuation">,</span> UnrecoverableKeyException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> <span class="token function">getSignature</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign<span class="token punctuation">,</span> String certificatePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> SignatureException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> <span class="token function">getVerifySignature</span><span class="token punctuation">(</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">package</span> bc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>encoders<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>BadPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>IllegalBlockSizeException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>NoSuchPaddingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的证书需要去 9.2 使用 keytool 生成</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CertificateCoderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String alias <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String certificatePath <span class="token operator">=</span> <span class="token string">"E:\\CA\\keytool\\localhost.cer"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String keyStorePath <span class="token operator">=</span> <span class="token string">"E:\\CA\\keytool\\localhost.keystore"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> UnrecoverableKeyException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> SignatureException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//test2();</span>        <span class="token comment" spellcheck="true">//test1();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//公钥加密---私钥解密</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchPaddingException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IllegalBlockSizeException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> UnrecoverableKeyException<span class="token punctuation">,</span> KeyStoreException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 公钥加密 ---- 私钥解密 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"数字证书"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> CertificateCoder<span class="token punctuation">.</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> CertificateCoder<span class="token punctuation">.</span><span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span> alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明文 : "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> CertificateException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> UnrecoverableKeyException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> NoSuchPaddingException<span class="token punctuation">,</span> BadPaddingException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> IllegalBlockSizeException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 私钥加密 ---- 公钥解密 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"数字证书"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> CertificateCoder<span class="token punctuation">.</span><span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plainText <span class="token operator">=</span> CertificateCoder<span class="token punctuation">.</span><span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span> certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明文 : "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException<span class="token punctuation">,</span> UnrecoverableKeyException<span class="token punctuation">,</span> NoSuchAlgorithmException<span class="token punctuation">,</span> KeyStoreException<span class="token punctuation">,</span> SignatureException<span class="token punctuation">,</span> InvalidKeyException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 私钥签名 ---- 公钥验签 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"签名"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原文 : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherText <span class="token operator">=</span> CertificateCoder<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> alias<span class="token punctuation">,</span> keyStorePath<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签名 : "</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> status <span class="token operator">=</span> CertificateCoder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>cipherText<span class="token punctuation">,</span>certificatePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验签结果 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>status <span class="token operator">?</span> <span class="token string">"成功"</span> <span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试结果</span>私钥签名 <span class="token operator">--</span><span class="token operator">--</span> 公钥验签 原文 <span class="token operator">:</span> 签名签名 <span class="token operator">:</span> Iykf1<span class="token operator">/</span>nAZjFkL<span class="token operator">/</span>aEwQD7nLc<span class="token operator">/</span>PLxIuuhC0ice0YdnG1IhUeY7NHd0iCZMsIkwsRS3NIbNoQjuj5iMmDWwpr9N9ILJzAHdExtwztDJL9jhz5AFVKEcVQ<span class="token operator">/</span>Tk2ZZHC5XaE7pMKgwGG<span class="token operator">+</span>v<span class="token operator">/</span>yDo87fk8VZKoY2ALkPw<span class="token operator">/</span>dE2KjOm5WLAXOpDLvHlmtq<span class="token operator">/</span>jkX19zCOkmR2Asihc<span class="token operator">+</span>3KUG39Sv4raW<span class="token operator">+</span>r0ogu61GQkK3GCzMODnDfZZUUokf7SAz3j<span class="token operator">/</span>YHf7Fw8rvymJyxCAJeLcw3c7RIJ6zCzpNeH9FZF0XpzBP9v37g13u9xPClOVlS4fLG3zbf3fWvNe5ir7aE2ImwmeaaqEHxUg<span class="token operator">==</span>验签结果 <span class="token operator">:</span> 成功</code></pre><h3 id="10、安全协议"><a href="#10、安全协议" class="headerlink" title="10、安全协议"></a>10、安全协议</h3></li><li><p>HTTPS 基于 SSL/TLS 的 HTTP 协议</p></li><li><p>HTTPS协议和 SSL 协议分属 TCP/IP 参考模型的应用层和传输层</p></li><li><p>Web 常用的安全访问协议</p></li><li><p>SSL/TLS协议包含两个协议，SSL（Secure Socket Layer 安全套接字层）、TLS（Transport Layer Security 传输层安全）</p></li><li><p>目前 SSL 版本： SSL1.0、SSL2.0、SSL3.0</p></li><li><p>通常所说的SSL/TLS 指的是 SSL3.0 或 TLS1.0 的网络协议</p></li></ul><h4 id="10-1、模型分析"><a href="#10-1、模型分析" class="headerlink" title="10.1、模型分析"></a>10.1、模型分析</h4><ul><li><p>协商算法 ： 服务器和客户端进行握手协议的第一阶段主要是协商算法</p><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram  客户端 --> 客户端 :  1、产生随机数 RNC  客户端 ->> 服务器端 :  2、发送 SSL/TLS 信息、算法信息、随机数  服务器端 ->> 服务器端 :  3、产生随机数 RNC  服务器端 -->> 客户端 :  4、回复 SSL/TLS 信息、算法信息、随机数、其他信息</code></pre><pre class=" language-shell"><code class="language-shell"># 1、客户端产生随机数RNC（Random Number Client）,这个随机数为后面构建密钥做准备# 2、</code></pre></li><li><p>后期更新单向认证和双向认证</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/09/13/redis/"/>
      <url>/2022/09/13/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-redis"><a href="#什么是-redis" class="headerlink" title="什么是 redis"></a>什么是 redis</h2><blockquote><p>官网 ： <a href="https://redis.io/">https://redis.io/</a></p></blockquote><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><ul><li>数百万开发人员用作<code>数据库</code>、<code>缓存</code>、<code>流引擎</code>和<code>消息代理</code>的开源<code>内存数据存储</code></li></ul><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>内存数据结构<ul><li>众所周知的“数据结构服务器”，支持字符串、哈希、列表、集合、排序集合、流等。</li><li><a href="https://redis.io/docs/data-types/">具体查看</a></li></ul></li><li>可编程的<ul><li>使用 Lua 的服务器端脚本和使用 Redis 函数的服务器端存储过程</li><li><a href="https://redis.io/docs/manual/programmability/">具体查看</a></li></ul></li><li>可扩展性<ul><li>用于在 C、C++ 和 Rust 中构建 Redis 自定义扩展的模块 API</li><li><a href="https://redis.io/docs/reference/modules/">具体查看</a></li></ul></li><li>持久性<ul><li>将数据集保存在内存中以便快速访问，但也可以将所有写入持久存储到永久存储中，以在重新启动和系统故障后继续存在。</li><li><a href="https://redis.io/docs/manual/persistence/">具体查看</a></li></ul></li><li>集群<ul><li>通过基于哈希的分片实现水平可扩展性，在集群增长时通过自动重新分区扩展到数百万个节点。</li><li><a href="https://redis.io/docs/manual/scaling/">具体查看</a></li></ul></li><li>高可用性<ul><li>用于独立和集群部署的自动故障转移复制</li><li><a href="https://redis.io/docs/manual/replication/">具体查看</a></li></ul></li></ul><h3 id="官方推荐使用场景"><a href="#官方推荐使用场景" class="headerlink" title="官方推荐使用场景"></a>官方推荐使用场景</h3><ul><li>实时数据存储(Real-time data store)<ul><li>Redis 的<code>多功能内存数据结构</code>能够为需要<code>低延迟</code>和<code>高吞吐量</code>的实时应用程序构建数据基础架构。</li></ul></li><li>缓存和会话存储(Caching &amp; session storage)<ul><li>Redis 的速度使其成为缓存数据库查询、复杂计算、API 调用和会话状态的理想选择</li></ul></li><li>流媒体和消息队列<ul><li>流数据类型支持高速数据摄取、消息传递、事件溯源和通知。</li></ul></li></ul><ol start="4"><li><h3 id="Redis-堆栈"><a href="#Redis-堆栈" class="headerlink" title="Redis 堆栈"></a>Redis 堆栈</h3></li></ol><ul><li>Redis Stack 使用现代数据模型和处理引擎扩展了 Redis，以提供完整的开发人员体验。下载源代码，使用您最喜欢的包管理器安装，或在云中免费启动它。<ul><li>Redis Stack Server 允许您使用可搜索的 JSON、时间序列和图形数据模型以及扩展的概率数据结构来构建应用程序</li><li>使用 Redis Stack 对象映射和客户端库快速提高工作效率。</li><li>使用 RedisInsight 可视化和优化您的 Redis 数据。</li></ul></li><li><a href="https://redis.io/download/">下载 redis 堆栈</a></li><li><a href="https://redis.io/docs/stack/">具体查看更多关于堆栈</a></li><li>Redis 堆栈用例<ul><li>可搜索的 Redis<ul><li>索引和查询 Redis 数据结构和数据模型；对您的 Redis 数据运行复杂的聚合和全文搜索。</li></ul></li><li>文档数据库<ul><li>完全在 Redis 中对域进行建模，并有效地查询您的 JSON 数据，而无需使用缓存。</li></ul></li><li>遥测<ul><li>从现场设备中获取连续读数，将其存储为时间序列数据或使用概率数据结构进行分析和重复数据删除</li></ul></li><li>身份和资源管理<ul><li>将数字资源和 ACL 定义为图形，并使用单个 Cypher 查询实时计算权限。</li></ul></li><li>向量相似度搜索<ul><li>查询向量嵌入以支持图像搜索、推荐引擎和自然语言文本处理。</li></ul></li><li>欺诈识别<ul><li>实时检测欺诈的所有工具，包括图形分析、概率查询、向量搜索，甚至使用流进行处理。</li></ul></li></ul></li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="安装启动-Redis-Server"><a href="#安装启动-Redis-Server" class="headerlink" title="安装启动 Redis Server"></a>安装启动 <code>Redis Server</code></h3><ul><li><p>在 <a href="https://redis.io/docs/getting-started/installation/install-redis-on-linux/">Linux</a> 上安装</p></li><li><p>在 <a href="https://redis.io/docs/getting-started/installation/install-redis-on-mac-os/">macOS</a> 上安装</p><ul><li><p><input checked="" disabled="" type="checkbox">  当前使用 macOS</p><ul><li><p>在 macOS 上使用 Homebrew 安装和启动 Redis</p><ol><li><strong>首先执行以下命令查看安装了 Homebrew</strong></li></ol><pre class=" language-bash"><code class="language-bash">$ brew --version  Homebrew 3.4.9  Homebrew/homebrew-core <span class="token punctuation">(</span>git revision ca10e12c01f<span class="token punctuation">;</span> last commit 2022-05-01<span class="token punctuation">)</span></code></pre><p>  如果此命令失败，您需要按照 <a href="https://brew.sh/">Homebrew 安装说明</a> 进行操作。</p><ol start="2"><li><strong>执行以下命令安装 Redis</strong></li></ol><pre class=" language-bash"><code class="language-bash">$ brew <span class="token function">install</span> redis</code></pre><p>  一般没什么问题就在系统上安装了 Redis</p><ol start="3"><li><strong>前台启动和停止 Redis Server</strong></li></ol><ul><li>启动</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-server</code></pre><p>  如果成功，您将看到 Redis 的启动日志，并且 Redis 将在前台运行。</p><ul><li>停止<ul><li>直接 Ctrl-C 退出</li></ul></li></ul><ol start="4"><li><strong>后台启动和停止 Redis Server</strong></li></ol><ul><li>启动</li></ul><pre class=" language-bash"><code class="language-bash">$ brew services start redis<span class="token operator">==</span><span class="token operator">></span> Successfully started <span class="token variable"><span class="token variable">`</span>redis<span class="token variable">`</span></span> <span class="token punctuation">(</span>label: homebrew.mxcl.redis<span class="token punctuation">)</span></code></pre><ul><li>运行以下命令检查托管 Redis 的状态</li></ul><pre class=" language-bash"><code class="language-bash">$ brew services info redisredis <span class="token punctuation">(</span>homebrew.mxcl.redis<span class="token punctuation">)</span>Running: ✔Loaded: ✔Schedulable: ✘User: overdosePID: 64176</code></pre><ul><li>停止</li></ul><pre class=" language-bash"><code class="language-bash">$ brew services stop redisStopping <span class="token variable"><span class="token variable">`</span>redis<span class="token variable">`</span></span><span class="token punctuation">..</span>. <span class="token punctuation">(</span>might take a while<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> Successfully stopped <span class="token variable"><span class="token variable">`</span>redis<span class="token variable">`</span></span> <span class="token punctuation">(</span>label: homebrew.mxcl.redis<span class="token punctuation">)</span></code></pre><ol start="5"><li>redis-cli 连接 redis-server</li></ol><pre class=" language-bash"><code class="language-bash">$ redis-cli</code></pre><p>  因为在本地，所以不需要其他像 host 参数连接，具体使用哪些参数，可以执行 redis-cli –help</p><p>  如 ： </p><pre class=" language-bash"><code class="language-bash">$ redis-cli -h 127.0.0.1 -p 6379 -a rediscli-auth --user username --pass password 等</code></pre><p>  测试</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush demos redis-macOS-demoOK127.0.0.1:6379<span class="token operator">></span> rpop demos<span class="token string">"redis-macOS-demo"</span></code></pre></li></ul></li></ul></li><li><p>在 <a href="https://redis.io/docs/getting-started/installation/install-redis-on-windows/">Windows</a> 上安装</p></li></ul><h2 id="Redis-CLI"><a href="#Redis-CLI" class="headerlink" title="Redis CLI"></a>Redis CLI</h2><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><ul><li>redis command line interface(redis-cli) 意思是 redis 命令行界面</li><li>用于向 Redis 服务器发送命令和读取来自 Redis 服务器的回复</li><li>有以下两种模式<ul><li>交互模式：交互式读取评估打印循环 (REPL) 模式<ul><li>用户键入 Redis 命令并接收回复,以下是通过 redis-cli 连接进入交互模式，连接之后直接输入命令就可以，无需带上 redis-cli</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli127.0.0.1:6379<span class="token operator">></span>  </code></pre></li><li>参数模式：redis-cli 使用附加参数执行并将回复打印到标准输出的命令模式。该模式下不会进入交互模式，直接 <code>redis-cli 命令 命令参数</code> 执行<pre class=" language-bash"><code class="language-bash">$ redis-cli INCR mycounter<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1$ redis-cli INCR mycounter<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2</code></pre>两个模式都是可以切换使用的,以下为从参数模式切换到交互模式<pre class=" language-bash"><code class="language-bash">$ redis-cli               127.0.0.1:6379<span class="token operator">></span> INCR mycounter<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span></code></pre><ul><li>redis-cli 可以使用一些选项来启动程序，以使其进入特殊模式，以完成更复杂的任务<ul><li>模拟从服务器并打印从主服务器接收的复制流</li><li>检查Redis的延迟并打印统计数据</li><li>显示延迟样本和频率以及其他许多东西的ASCII图</li></ul></li></ul></li></ul></li></ul><h3 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h3><h4 id="命令的返回值和类型"><a href="#命令的返回值和类型" class="headerlink" title="命令的返回值和类型"></a>命令的返回值和类型</h4><pre class=" language-bash"><code class="language-bash">  $ redis-cli INCR mycounter  <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4</code></pre><p>回复值为 4 ，类型是括号里的 integer, redis 是类型化的，包括 strings, arrays, integers, nil, errors 等等</p><h4 id="重定向输出到文件中"><a href="#重定向输出到文件中" class="headerlink" title="重定向输出到文件中"></a>重定向输出到文件中</h4><p>redis-cli仅在检测到标准输出是 tty 或终端时才显示附加信息以供人类阅读。对于所有其他输出，它将自动启用原始输出模式，如下例所示</p><pre class=" language-bash"><code class="language-bash">  $ redis-cli INCR mycounter <span class="token operator">></span> /Users/overdose/IdeaProjects/springboot-demo/redis/redis-result.txt  $ <span class="token function">cat</span> redis/redis-result.txt  5</code></pre><p>强制不使用原始输出模式可以加 –no-raw ,否则也可以使用显示原始输出 –raw</p><pre class=" language-bash"><code class="language-bash">  $ redis-cli --no-raw INCR mycounter <span class="token operator">></span> /Users/overdose/IdeaProjects/springboot-demo/redis/redis-result.txt  $ <span class="token function">cat</span> redis/redis-result.txt  <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6</code></pre><h4 id="字符串引用和转义"><a href="#字符串引用和转义" class="headerlink" title="字符串引用和转义"></a>字符串引用和转义</h4><ul><li>空格字符会自动分隔参数,字符串使用 “” ,支持转义字符</li></ul><pre class=" language-bash"><code class="language-bash">\<span class="token string">"- 双引号\n- 换行\r- 回车\t- 水平选项卡\b- 退格\a- 警报\\- 反斜杠\xhh- 任何由十六进制数 ( hh )表示的 ASCII 字符单引号假定字符串是文字，并且只允许以下转义序列：\'- 单引号\\- 反斜杠127.0.0.1:6379> SET mykey "</span>Hello\nWorld<span class="token string">"OK127.0.0.1:6379> GET mykeyHelloWorld例如，当您输入包含单引号或双引号的字符串时，例如在密码中可能会转义字符串，如下所示：127.0.0.1:6379> AUTH some_admin_user "</span><span class="token operator">></span>^8T<span class="token operator">></span>6Na<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;u|jp>+v\"55\@_;OU(OR]7mbAYGqsfyu48(j'%hQH7;v*f1H$&amp;#123;*gD(Se'"</span></code></pre><h4 id="主机、端口、密码和数据库"><a href="#主机、端口、密码和数据库" class="headerlink" title="主机、端口、密码和数据库"></a>主机、端口、密码和数据库</h4><ul><li>默认通过 ip = 127.0.0.1 ,port = 6379 连接 redis server 实例,甚至可以通过 -h 指定 ip,-p 指定端口连接</li></ul><pre class=" language-bash"><code class="language-bash">  $ redis-cli -h 127.0.0.1 -p 6379 PING  PONG</code></pre><p>如果实例受密码保护，该-a <password>选项将执行身份验证，无需显式使用以下AUTH命令</p><pre class=" language-bash"><code class="language-bash">  $ redis-cli -a myUnguessablePazzzzzword123 PING  PONG</code></pre><p>出于安全考虑，建议使用 REDISCLI_AUTH 配置认证</p><p>如果不清楚可以查看一下流程步骤查看以及配置密码</p><ul><li>查看是否配置密码</li></ul><pre class=" language-bash"><code class="language-bash">  $ redis-cli config get requirepass  1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>  2<span class="token punctuation">)</span> <span class="token string">""</span></code></pre><p>以上结果表示还没设置密码，如果设置了密码会出现如下结果</p><pre class=" language-bash"><code class="language-bash">  $ redis-cli config get requirepass         <span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.</code></pre><ul><li><p>设置密码</p><ul><li>临时性设置(命令配置)， redis 重启后失效</li></ul><pre class=" language-bash"><code class="language-bash">    $ redis-cli config <span class="token keyword">set</span> requirepass 123456    OK</code></pre><pre><code>123456 表示你要设置的密码  </code></pre><ul><li>永久性设置(redis.conf 文件配置), redis 重启后不失效</li></ul><p>在 redis.conf 配置文件中找到 requirepass 这个参数，如下配置：</p><p>修改redis.conf配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># requirepass foobared</span>requirepass 123456   <span class="token comment" spellcheck="true"># 指定密码123456</span></code></pre><p>保存后重启 redis 就可以了</p><ul><li>连接验证<ul><li>通过命令 <code>auth password</code> 验证<ul><li>验证前</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli get key<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.</code></pre><ul><li>验证后</li></ul>不建议直接通过 <code>-a password</code> 在命令行上输入明文密码，会有如下提示<pre class=" language-bash"><code class="language-bash">  $ redis-cli -a 123456 get key  Warning: Using a password with <span class="token string">'-a'</span> or <span class="token string">'-u'</span> option on the <span class="token function">command</span> line interface may not be safe.  <span class="token punctuation">(</span>nil<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 因为 key 没有 value 值，返回类型 nil</span></code></pre><ul><li>建议先登录，再通过 <code>auth password</code></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli127.0.0.1:6379<span class="token operator">></span> get key<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> auth 123456OK127.0.0.1:6379<span class="token operator">></span> get key<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span></code></pre></li></ul></li></ul></li><li><p>连接指定的数据库</p><ul><li>redis 总共有 16 个数据库，默认使用的是 0 数据库 ，因此默认连接 0 数据库，不显示数据库索引</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli127.0.0.1:6379<span class="token operator">></span> auth 123456OK127.0.0.1:6379<span class="token operator">></span></code></pre><ul><li>通过 <code>select index</code> 切换到对应第 index+1 个数据库(索引从 0 开始)</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 3 <span class="token comment" spellcheck="true"># 切换到索引为 3 的数据库，也就是第 4 个数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> 127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 16 <span class="token comment" spellcheck="true"># 总共只有 16 个数据库，索引只支持到 15</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR DB index is out of range127.0.0.1:6379<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span></code></pre><ul><li>也可以通过 <code>-n index</code> 指定数据库</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli -n 1 <span class="token comment" spellcheck="true"># 连接到 index=1 数据库</span>$ redis-cli -n 1 SELECT 1 failed: NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> auth 123456OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span></code></pre><ul><li>各个数据库保存的数据互不影响，其他数据库看不到<ul><li>在 index=1 和 index=2 的数据库分别设置 key=key1 的键值对，互相获取对方的 key ,获取的是在本数据库设置的值，都无法获取对方数据库设置的值</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">set</span> key1 123OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 2OK127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">set</span> key1 234OK127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token string">"234"</span>127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token string">"123"</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> </code></pre></li><li>flushdb 清除当前所在数据库的所有数据，对其他数据库的数据不影响<ul><li>执行 flushdb 清除索引为 1 的数据库，查看索引为 1 和 2 数据库的数据</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> flushdbOK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 2 <span class="token comment" spellcheck="true"># 切换到 2 数据库查看</span>OK127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"key1"</span>127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token string">"234"</span>127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span></code></pre></li><li>flushall 清除 redis 服务起的所有数据库的数据<ul><li>执行 flushall 之后查看 1 和 2 数据库的数据是否存在</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 1 <span class="token comment" spellcheck="true"># 先切换回 1 数据库添加数据</span>OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">set</span> key1 123OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token string">"123"</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> flushall <span class="token comment" spellcheck="true"># 清除所有数据库的数据</span>OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> get key1<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 2OK127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> get key2<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span></code></pre><h4 id="SSL-TLS-连接"><a href="#SSL-TLS-连接" class="headerlink" title="SSL/TLS 连接"></a>SSL/TLS 连接</h4></li></ul></li><li><p><a href="https://redis.io/docs/manual/security/encryption/">TLS 官方参考</a></p></li><li><p>默认情况下，redis-cli 使用明文 TCP 连接 redis server，可以通过 –tls 启动安全的 redis server, 通过 –cacert or –cacertdir 配置信任根证书，如果目标 redis server 要求客户端认证，需要在客户端通过参数 –cert 和 –key 配置证书和配对的私钥连接启动 tls 的 redis server </p></li><li><p>生成证书和私钥</p><ul><li><p>官方提供生成证书和私钥的脚本 <code>gen-test-certs.sh</code></p><ul><li>脚本使用 openssl 工具生成私钥和证书的，对于 openssl 的命令参数可以参考 <a href="https://www.openssl.org/">openssl 官网</a>    </li></ul></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Generate some test certificates which are used by the regression test suite:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   tests/tls/ca.&amp;#123;crt,key&amp;#125;          Self signed CA certificate.</span><span class="token comment" spellcheck="true">#   tests/tls/redis.&amp;#123;crt,key&amp;#125;       A certificate with no key usage/policy restrictions.</span><span class="token comment" spellcheck="true">#   tests/tls/client.&amp;#123;crt,key&amp;#125;      A certificate restricted for SSL client usage.</span><span class="token comment" spellcheck="true">#   tests/tls/server.&amp;#123;crt,key&amp;#125;      A certificate restricted for SSL server usage.</span><span class="token comment" spellcheck="true">#   tests/tls/redis.dh              DH Params file.</span>generate_cert<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>local name<span class="token operator">=</span><span class="token variable">$1</span>local cn<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>local opts<span class="token operator">=</span><span class="token string">"<span class="token variable">$3</span>"</span>local keyfile<span class="token operator">=</span>tests/tls/$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name&amp;#125;.key</span>local certfile<span class="token operator">=</span>tests/tls/$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name&amp;#125;.crt</span><span class="token punctuation">[</span> -f <span class="token variable">$keyfile</span> <span class="token punctuation">]</span> <span class="token operator">||</span> openssl genrsa -out <span class="token variable">$keyfile</span> 2048openssl req \-new -sha256 \-subj <span class="token string">"/O=Redis Test/CN=<span class="token variable">$cn</span>"</span> \-key <span class="token variable">$keyfile</span> <span class="token operator">|</span> \openssl x509 \-req -sha256 \-CA tests/tls/ca.crt \-CAkey tests/tls/ca.key \-CAserial tests/tls/ca.txt \-CAcreateserial \-days 365 \<span class="token variable">$opts</span> \-out <span class="token variable">$certfile</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token function">mkdir</span> -p tests/tls<span class="token punctuation">[</span> -f tests/tls/ca.key <span class="token punctuation">]</span> <span class="token operator">||</span> openssl genrsa -out tests/tls/ca.key 4096openssl req \-x509 -new -nodes -sha256 \-key tests/tls/ca.key \-days 3650 \-subj <span class="token string">'/O=Redis Test/CN=Certificate Authority'</span> \-out tests/tls/ca.crt<span class="token function">cat</span> <span class="token operator">></span> tests/tls/openssl.cnf <span class="token operator">&lt;&lt;</span><span class="token string">_END_[ server_cert ]keyUsage = digitalSignature, keyEnciphermentnsCertType = server[ client_cert ]keyUsage = digitalSignature, keyEnciphermentnsCertType = client_END_</span>generate_cert server <span class="token string">"Server-only"</span> <span class="token string">"-extfile tests/tls/openssl.cnf -extensions server_cert"</span>generate_cert client <span class="token string">"Client-only"</span> <span class="token string">"-extfile tests/tls/openssl.cnf -extensions client_cert"</span>generate_cert redis <span class="token string">"Generic-cert"</span><span class="token punctuation">[</span> -f tests/tls/redis.dh <span class="token punctuation">]</span> <span class="token operator">||</span> openssl dhparam -out tests/tls/redis.dh 2048</code></pre><p>会在当前目录下创建 tests/tls/ 目录，包含以下文件</p><pre class=" language-bash"><code class="language-bash">ca.crtca.keyca.txtclient.crtclient.keyopenssl.cnfredis.crtredis.dhredis.keyserver.crtserver.key</code></pre><ul><li><p>启动 TLS redis server</p></li><li><p>当前所在的目录 redis/  redis 有一个子目录为 tests    </p></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-server --tls-port 6379 --port 0 \                              --tls-cert-file ./tests/tls/redis.crt \--tls-key-file ./tests/tls/redis.key \--tls-ca-cert-file ./tests/tls/ca.crt</code></pre><p>参数解析</p><pre class=" language-bash"><code class="language-bash">--tls-port 6379 <span class="token comment" spellcheck="true"># 表示在指定的端口如 6379 上允许接受 SSL/TLS 连接</span>--port 0 <span class="token comment" spellcheck="true"># 允许同时接受非 SSL 和 SSL 端口，当 port 参数值为 0 时禁止非 SSL 端口连接</span>--tls-cert-file ./tests/tls/redis.crt <span class="token comment" spellcheck="true"># redis server 启动 TLS 的 x.509 格式证书</span>--tls-key-file ./tests/tls/redis.key <span class="token comment" spellcheck="true"># redis server 启动 TLS 的私钥</span>--tls-ca-cert-file ./tests/tls/ca.crt <span class="token comment" spellcheck="true"># redis server 启动 TLS 的根证书 ca</span><span class="token comment" spellcheck="true"># 要支持基于 DH 的密码，还可以配置 DH 参数文件。</span>--tls-dh-params-file ./tests/tls/redis.dh</code></pre><ul><li><p>客户端验证连接</p><p>默认是双向验证连接的，即客户端连接时也需要配置证书</p></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --tls \--cert ./tests/tls/redis.crt \ --key ./tests/tls/redis.key \ --cacert ./tests/tls/ca.crt</code></pre><pre class=" language-bash"><code class="language-bash">--tls <span class="token comment" spellcheck="true"># 表示在使用 SSL/TLS 连接</span>--cert ./tests/tls/redis.crt <span class="token comment" spellcheck="true"># redis client 连接 redis tls server 的 x.509 格式证书</span>--key ./tests/tls/redis.key <span class="token comment" spellcheck="true"># redis 连接 redis tls server 的私钥</span>--cacert ./tests/tls/ca.crt <span class="token comment" spellcheck="true"># redis 连接 redis tls server 的根证书 ca</span></code></pre><ul><li>如果不使用证书时，会提示 <code>Error: Connection reset by peer</code></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli        127.0.0.1:6379<span class="token operator">></span> get key1Error: Connection reset by peer</code></pre><ul><li><p>配置禁用客户端身份验证连接 redis 服务(ca 证书必须配置)</p></li><li><p>首先需要在 redis 服务启动时使用配置参数 <code>--tls-auth-clients no</code> 禁用认证客户端</p></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-server --tls-port 6379 --port 0 \--tls-cert-file ./tests/tls/redis.crt \--tls-key-file ./tests/tls/redis.key \--tls-ca-cert-file ./tests/tls/ca.crt \--tls-auth-clients no</code></pre><ul><li>可证书连接</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --tls \--cert ./tests/tls/client.crt \--key ./tests/tls/client.key \--cacert ./tests/tls/ca.crt</code></pre><ul><li>可不使用证书连接</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可证书连接</span>$ redis-cli --tls \--cacert ./tests/tls/ca.crt</code></pre><h4 id="从其他程序输入"><a href="#从其他程序输入" class="headerlink" title="从其他程序输入"></a>从其他程序输入</h4></li><li><p>使用 -x 选项接受有效负载的最后一个参数值</p></li></ul><pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 给 `net_services` key 设置来自本地文件系统 `/etc/services` 的值,</span>  <span class="token comment" spellcheck="true"># -x 将文件重定向到 CLI 的标准输入作为满足 `SET net_services` 命令的值</span>  $ redis-cli -x SET net_services <span class="token operator">&lt;</span> /etc/services  OK  $ redis-cli GETRANGE net_services 0 50  <span class="token string">"#\n# Network services, Internet style\n#\n# Note that "</span></code></pre><ul><li>给 redis-cli 喂养一系列写在文本文件中的命令脚本</li></ul><pre class=" language-bash"><code class="language-bash">  $ <span class="token function">cat</span> /tmp/commands.txt  SET item:3374 100  INCR item:3374  APPEND item:3374 xxx  GET item:3374  $ <span class="token function">cat</span> /tmp/commands.txt <span class="token operator">|</span> redis-cli  OK  <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 101  <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6  <span class="token string">"101xxx"</span>  <span class="token comment" spellcheck="true"># commands.txt 中的所有命令都会被连续执行</span></code></pre><h4 id="连续运行相同的命令"><a href="#连续运行相同的命令" class="headerlink" title="连续运行相同的命令"></a>连续运行相同的命令</h4><ul><li>选项 -r : -r &lt;count&gt; ,设置命令的运行次数</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli -r 5 INCR counter_value<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5$ redis-cli -r 8 INCR counter_value <span class="token comment" spellcheck="true"># 连续执行 5 次后，修改为连续执行 8 次</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 12<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 13overdose@OverdosedeMacBook-Air redis %<span class="token comment" spellcheck="true"># 在交互模式下，在命令名称前加上一个数字，可以多次运行相同的命令</span>127.0.0.1:6379<span class="token operator">></span> 5 INCR mycounter<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5</code></pre><ul><li>选项 -i : -i &lt;delay&gt; ,设置不同命令调用之间的延迟（以秒为单位）（能够指定诸如 0.1 之类的值来表示 100 毫秒）,表示命令之间的执行需要延迟多少时间<ul><li>当 -r 的参数值为 -1 时，表示无限次执行</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli -r -1 -i 1 INFO <span class="token operator">|</span> <span class="token function">grep</span> rss_humanused_memory_rss_human:2.71Mused_memory_rss_human:2.73Mused_memory_rss_human:2.73Mused_memory_rss_human:2.73M</code></pre><h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><ul><li><p>官方表示这部分内容很重要，单独一页面介绍：<a href="https://redis.io/docs/reference/patterns/bulk-loading/">https://redis.io/docs/reference/patterns/bulk-loading/</a></p></li><li><p>批量加载：批量加载是使用大量预先存在的数据加载到 Redis 的过程。</p></li><li><p>首先方法：创建一个包含 Redis 协议的原始格式的 text 文本文件，以便调用插入所需数据所需的命令</p><ul><li>例如，如果我需要生成一个大型数据集，其中有数十亿个键，格式为：`keyN -&gt; ValueN’，我将创建一个包含以下 Redis 协议格式的命令的文件：</li></ul><pre class=" language-bash"><code class="language-bash">SET Key0 Value0SET Key1 Value1<span class="token punctuation">..</span>.SET KeyN ValueN</code></pre><ul><li>创建此文件后，剩下的操作就是尽快将其提供给 Redis。过去这样做的方法是使用 netcat以下命令：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>cat data.txt<span class="token punctuation">;</span> <span class="token function">sleep</span> 10<span class="token punctuation">)</span> <span class="token operator">|</span> nc localhost 6379 <span class="token operator">></span> /dev/null</code></pre><ul><li>但是这不推荐，因为 netcat 并不真正知道所有数据何时传输并且无法检查错误，推荐在 Redis 2.6 或更高的版本使用以下专门设计为批量加载的管道模式</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> data.txt <span class="token operator">|</span> redis-cli --pipe</code></pre><ul><li>执行完成会有如下类似的输出反馈</li></ul><pre class=" language-bash"><code class="language-bash">All data transferred. Waiting <span class="token keyword">for</span> the last reply<span class="token punctuation">..</span>.Last reply received from server.errors: 0, replies: 1000000</code></pre><ul><li>上面提及批量加载需要生成 Redis 协议<ul><li><a href="https://redis.io/docs/reference/protocol-spec/">协议规范 RESP</a></li></ul></li></ul><pre class=" language-bash"><code class="language-bash">*<span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span>$<span class="token operator">&lt;</span>len<span class="token operator">></span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span><span class="token operator">&lt;</span>arg0<span class="token operator">></span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span><span class="token operator">&lt;</span>arg1<span class="token operator">></span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>argN<span class="token operator">></span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span></code></pre><p>其中&lt;cr&gt;表示“\r”（或 ASCII 字符 13），&lt;lf&gt;表示“\n”（或 ASCII 字符 10）</p><p>例如 set key value 命令的协议如下</p><pre class=" language-bash"><code class="language-bash">*3<span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span><span class="token variable">$3</span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span>SET<span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span><span class="token variable">$3</span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span>key<span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span><span class="token variable">$5</span><span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span>value<span class="token operator">&lt;</span>cr<span class="token operator">></span><span class="token operator">&lt;</span>lf<span class="token operator">></span></code></pre><p>带引号字符串表示</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"*3\r\n<span class="token variable">$3</span>\r\nSET\r\n<span class="token variable">$3</span>\r\nkey\r\n<span class="token variable">$5</span>\r\nvalue\r\n"</span></code></pre><p>如果需要批量生成，则需要按照格式组装命令即可</p><ul><li><p>管道模式如何在幕后工作</p><ul><li>redis-cli –pipe 尝试尽可能快地向服务器发送数据。</li><li>同时它会在可用时读取数据，并尝试对其进行解析。</li><li>一旦没有更多数据要从标准输入读取，它会发送一个特殊的ECHO 命令，其中包含一个随机的 20 字节字符串：我们确定这是最新发送的命令，并且我们确信如果我们收到相同的 20，我们可以匹配回复检查字节作为批量回复。</li><li>一旦发送了这个特殊的最终命令，接收回复的代码就会开始匹配这 20 个字节的回复。当达到匹配的回复时，它可以成功退出。</li></ul><p>使用这个技巧，我们不需要解析我们发送到服务器的协议来了解我们发送了多少命令，而只需解析回复。</p><p>然而，在解析回复时，我们对所有解析的回复进行计数，以便最后我们能够告诉用户通过批量插入会话传输到服务器的命令数量。</p></li></ul></li></ul><h4 id="CSV-格式输出"><a href="#CSV-格式输出" class="headerlink" title="CSV 格式输出"></a>CSV 格式输出</h4><ul><li><p>CSV ： Comma Separated Values ，逗号分隔值</p><pre class=" language-bash"><code class="language-bash">$ redis-cli LPUSH mylist a b c d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4$ redis-cli --csv LRANGE mylist 0 -1<span class="token string">"d"</span>,<span class="token string">"c"</span>,<span class="token string">"b"</span>,<span class="token string">"a"</span></code></pre><h4 id="还可以运行-Lua-脚本"><a href="#还可以运行-Lua-脚本" class="headerlink" title="还可以运行 Lua 脚本"></a>还可以运行 Lua 脚本</h4></li></ul><h4 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h4><ul><li>在交互模式下，用户在提示符下键入 Redis 命令。该命令被发送到服务器，进行处理，然后将回复解析并呈现为更简单的形式以供阅读。</li><li>在交互模式下运行不需要什么特别的redis-cli- 只需在没有任何参数的情况下执行它</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli127.0.0.1:6379<span class="token operator">></span> PINGPONG</code></pre><p>  字符串127.0.0.1:6379&gt;是提示符。它显示连接的 Redis 服务器实例的主机名和端口。</p><p>  当连接的服务器更改或在与数据库编号为零的数据库不同的数据库上操作时，提示会更新：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> SELECT 2OK127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> DBSIZE<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">></span> SELECT 0OK127.0.0.1:6379<span class="token operator">></span> DBSIZE<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 503</code></pre><h4 id="处理连接和重连"><a href="#处理连接和重连" class="headerlink" title="处理连接和重连"></a>处理连接和重连</h4><ul><li>使用 CONNECT 命令在交互模式下连接不同的实例</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动另外一个实例，端口为 6380，在 6379 端口的实例交互模式下连接 6380</span>overdose@OverdosedeMacBook-Air redis % redis-cli 127.0.0.1:6379<span class="token operator">></span> get key1<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> connect localhost 6380localhost:6380<span class="token operator">></span></code></pre><ul><li>断开重连</li></ul><p>  一般检测到断线后，redis-cli总是尝试透明重连；如果尝试失败，则显示错误并进入断开连接状态。以下是断开和重新连接的示例：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> INFO SERVERCould not connect to Redis at 127.0.0.1:6379: Connection refusednot connected<span class="token operator">></span> PINGPONG127.0.0.1:6379<span class="token operator">></span><span class="token punctuation">(</span>now we are connected again<span class="token punctuation">)</span></code></pre><h4 id="redis-cli-命令提示"><a href="#redis-cli-命令提示" class="headerlink" title="redis-cli 命令提示"></a>redis-cli 命令提示</h4><ul><li>历史记录都存在一个 <code>.rediscli_history</code> 文件</li><li>输入命令后按 TAB 键，可以看到命令的使用提示</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> Z<span class="token operator">&lt;</span>TAB<span class="token operator">></span>127.0.0.1:6379<span class="token operator">></span> ZADD<span class="token operator">&lt;</span>TAB<span class="token operator">></span>127.0.0.1:6379<span class="token operator">></span> ZCARD<span class="token operator">&lt;</span>TAB<span class="token operator">></span></code></pre><h4 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h4><ul><li>场景：对于某个命令的使用不清楚可以参考查看</li><li><a href="https://redis.io/commands/">在线命令帮助</a></li><li>help 帮助命令</li><li>首先，通过对类别查看，可以获取该类别下的所有命令及大致用法</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">help</span> @<span class="token operator">&lt;</span>category<span class="token operator">></span> <span class="token comment" spellcheck="true"># @&lt;category> 包含以下的类别</span>@generic@string@list@set@sorted_set@hash@pubsub@transactions@connection@server@scripting@hyperloglog@cluster@geo@stream<span class="token comment" spellcheck="true"># 以 string 类别为例</span>127.0.0.1:6380<span class="token operator">></span> <span class="token function">help</span> @string<span class="token punctuation">..</span>.GET key <span class="token comment" spellcheck="true"># 命令的执行格式</span>summary: Get the value of a key <span class="token comment" spellcheck="true"># 命令的作用描述，获取一个 key 对应的值</span>since: 1.0.0 <span class="token comment" spellcheck="true"># 命令出现的版本</span>SET key value <span class="token punctuation">[</span>NX<span class="token operator">|</span>XX<span class="token punctuation">]</span> <span class="token punctuation">[</span>GET<span class="token punctuation">]</span> <span class="token punctuation">[</span>EX seconds<span class="token operator">|</span>PX milliseconds<span class="token operator">|</span>EXAT unix-time-seconds<span class="token operator">|</span>PXAT unix-time-milliseconds<span class="token operator">|</span>KEEPTTL<span class="token punctuation">]</span>summary: Set the string value of a keysince: 1.0.0<span class="token punctuation">..</span>.</code></pre><ul><li>其次，查看具体某个命令的用法</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6380<span class="token operator">></span> <span class="token function">help</span> GETGET keysummary: Get the value of a keysince: 1.0.0group: string</code></pre><h4 id="清理屏幕"><a href="#清理屏幕" class="headerlink" title="清理屏幕"></a>清理屏幕</h4><ul><li>跟 shell 终端使用 <code>clear</code> 命令清除屏幕一样的效果,即隐藏之前记录，变为首行的效果</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6380<span class="token operator">></span> <span class="token function">clear</span>127.0.0.1:6380<span class="token operator">></span></code></pre><h4 id="特殊的操作模式"><a href="#特殊的操作模式" class="headerlink" title="特殊的操作模式"></a>特殊的操作模式</h4><ul><li>用于显示有关 Redis 服务器的连续统计信息的监控工具,使用命令参数 <code>--stat</code></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --stat------- data ------ --------------------- load -------------------- - child -keys       mem      clients blocked requests            connections          2          1.88M    1       0       33 <span class="token punctuation">(</span>+0<span class="token punctuation">)</span>             8           2          1.86M    1       0       34 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           2          1.86M    1       0       35 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           2          1.87M    1       0       36 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           2          1.87M    1       0       37 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           2          1.87M    1       0       38 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           2          1.86M    1       0       39 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           2          1.86M    1       0       40 <span class="token punctuation">(</span>+1<span class="token punctuation">)</span>             8           ^C$</code></pre><ul><li>扫描最大的 key<ul><li>根据响应可以找到各种类型的 key ,数据占了多少字节</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --bigkeys<span class="token comment" spellcheck="true"># Scanning the entire keyspace to find biggest keys as well as</span><span class="token comment" spellcheck="true"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span><span class="token comment" spellcheck="true"># per 100 SCAN commands (not usually needed).</span><span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest string found so far <span class="token string">'"counter_value"'</span> with 2 bytes<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest string found so far <span class="token string">'"net_services"'</span> with 677972 bytes-------- summary -------Sampled 2 keys <span class="token keyword">in</span> the keyspace<span class="token operator">!</span>Total key length <span class="token keyword">in</span> bytes is 25 <span class="token punctuation">(</span>avg len 12.50<span class="token punctuation">)</span>Biggest string found <span class="token string">'"net_services"'</span> has 677972 bytes0 lists with 0 items <span class="token punctuation">(</span>00.00% of keys, avg size 0.00<span class="token punctuation">)</span>0 hashs with 0 fields <span class="token punctuation">(</span>00.00% of keys, avg size 0.00<span class="token punctuation">)</span>2 strings with 677974 bytes <span class="token punctuation">(</span>100.00% of keys, avg size 338987.00<span class="token punctuation">)</span>0 streams with 0 entries <span class="token punctuation">(</span>00.00% of keys, avg size 0.00<span class="token punctuation">)</span>0 sets with 0 members <span class="token punctuation">(</span>00.00% of keys, avg size 0.00<span class="token punctuation">)</span>0 zsets with 0 members <span class="token punctuation">(</span>00.00% of keys, avg size 0.00<span class="token punctuation">)</span></code></pre><ul><li>获取密钥列表<ul><li>使用 –scan 命令，不阻塞 redis 服务，还可以过滤</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --scan <span class="token operator">|</span> <span class="token function">head</span> -10counter_valuenet_services<span class="token comment" spellcheck="true"># 还可以通过 --pattern 匹配</span>$ redis-cli --scan --pattern <span class="token string">'*-11*'</span>key-114key-117key-118key-113key-115key-112key-119key-11key-111key-110key-116</code></pre><ul><li>发布/订阅模式</li><li>CLI 可以在 Redis 发布/订阅 channel 通道使用 <code>PUBLISH</code> 命令发布消息。订阅 channel 通道是为了接收消息，因此在终端会被阻塞等待。</li><li>不像其他特殊模式有其他命令参数，发布/订阅只有命令 <code>PSUBSCRIBE</code>(发布) 和 <code>SUBSCRIBE</code>(订阅)</li><li>查看<code>PSUBSCRIBE</code> 和 <code>SUBSCRIBE</code> 命令使用</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># PSUBSCRIBE</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">help</span> PSUBSCRIBEPSUBSCRIBE pattern <span class="token punctuation">[</span>pattern <span class="token punctuation">..</span>.<span class="token punctuation">]</span>summary: Listen <span class="token keyword">for</span> messages published to channels matching the given patternssince: 2.0.0group: pubsub<span class="token comment" spellcheck="true"># SUBSCRIBE</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">help</span> SUBSCRIBESUBSCRIBE channel <span class="token punctuation">[</span>channel <span class="token punctuation">..</span>.<span class="token punctuation">]</span>summary: Listen <span class="token keyword">for</span> messages published to the given channelssince: 2.0.0group: pubsub</code></pre><ul><li>在一个客户端 A 启动发布/订阅模式</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli PSUBSCRIBE <span class="token string">'*'</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 表示当前客户端进入发布/订阅模式</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1</code></pre><ul><li>启动另一个客户端 B，发布消息</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看 PUBLISH 命令使用</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">help</span> publishPUBLISH channel messagesummary: Post a message to a channelsince: 2.0.0group: pubsub<span class="token comment" spellcheck="true"># 参照 `PUBLISH channel message` 用法发布消息</span>$ redis-cli PUBLISH mychannel mymessage<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1$ redis-cli PUBLISH mychannel mymessage2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 此时，在客户端 A 收到消息以及格式如下</span>$ redis-cli PSUBSCRIBE <span class="token string">'*'</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"pmessage"</span> <span class="token comment" spellcheck="true"># 第一次接收数据</span>2<span class="token punctuation">)</span> <span class="token string">"*"</span>3<span class="token punctuation">)</span> <span class="token string">"mychannel"</span>4<span class="token punctuation">)</span> <span class="token string">"mymessage"</span>1<span class="token punctuation">)</span> <span class="token string">"pmessage"</span> <span class="token comment" spellcheck="true"># 第二次接收数据</span>2<span class="token punctuation">)</span> <span class="token string">"*"</span>3<span class="token punctuation">)</span> <span class="token string">"mychannel"</span> <span class="token comment" spellcheck="true"># channel 名字</span>4<span class="token punctuation">)</span> <span class="token string">"mymessage2"</span> <span class="token comment" spellcheck="true"># message 消息</span><span class="token comment" spellcheck="true"># CTRL-C 退出 发布/订阅模式</span></code></pre><ul><li>监控 Redis 中执行的命令<ul><li>跟上面的发布/订阅模式有点像，一旦使用 <code>MONITOR</code> 命令，就会自动进入监控模式。活动 Redis 实例接收到的所有命令都将打印到标准输出：</li><li>客户端 A 进入监控模式</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli monitorOK<span class="token comment" spellcheck="true"># 客户端 B 执行完命令操作后，客户端 A 出现以下内容</span>$ redis-cli monitorOK1663038437.104451 <span class="token punctuation">[</span>0 127.0.0.1:58590<span class="token punctuation">]</span> <span class="token string">"COMMAND"</span> <span class="token string">"DOCS"</span>1663038456.134602 <span class="token punctuation">[</span>0 127.0.0.1:58590<span class="token punctuation">]</span> <span class="token string">"set"</span> <span class="token string">"key1"</span> <span class="token string">"hello"</span>1663038460.157135 <span class="token punctuation">[</span>0 127.0.0.1:58590<span class="token punctuation">]</span> <span class="token string">"get"</span> <span class="token string">"key1"</span></code></pre><ul><li>客户端 B 执行命令操作</li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 helloOK127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span></code></pre><ul><li>RDB 文件的远程备份<ul><li>确保 Redis 实例的灾难恢复,允许将 RDB 文件从任何 Redis 实例传输到正在运行的本地计算机,通过 redis-cli <code>--rdb &lt;dest-filename&gt;</code>完成</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --rdb /tmp/dump.rdbSYNC sent to master, writing 13256 bytes to <span class="token string">'/tmp/dump.rdb'</span>Transfer finished with success.</code></pre><ul><li>副本模式<ul><li>CLI 的副本模式是对 Redis 开发人员和调试操作有用的高级功能。它允许检查主节点在复制流中发送到其副本的内容，以便将写入传播到其副本。选项名称很简单–replica。以下是一个工作示例：</li></ul></li></ul><pre class=" language-bash"><code class="language-bash">$ redis-cli --replicasending REPLCONF rdb-filter-only SYNC with master, discarding bytes of bulk transfer <span class="token keyword">until</span> EOF marker<span class="token punctuation">..</span>.SYNC <span class="token keyword">done</span> after 211 bytes. Logging commands from master.sending REPLCONF ACK 0<span class="token string">"ping"</span><span class="token string">"ping"</span><span class="token string">"ping"</span><span class="token string">"ping"</span><span class="token punctuation">..</span>.</code></pre></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>Redis 是一个<code>数据结构</code>服务器(主要以数据为驱动)。<u>Redis 的核心是提供一系列原生数据类型</u>，可帮助您解决从<code>缓存</code>到<code>队列</code>再到<code>事件处理</code>的各种问题。</li></ul><h3 id="包含的数据类型"><a href="#包含的数据类型" class="headerlink" title="包含的数据类型"></a>包含的数据类型</h3><ol><li>strings 字符串<ul><li>strings 是最基本的数据类型</li><li><a href="https://redis.io/docs/data-types/strings/">strings 概述</a></li><li><a href="https://redis.io/commands/?group=string">strings 在线命令参考</a></li><li><a href="https://yuan-hy.github.io/2022/09/14/redis-strings/">strings 详细教程</a></li></ul></li><li>lists 列表<ul><li>按<code>插入列表的顺序排序</code>的<code>字符串列表</code></li><li>特点 ： <code>有序</code></li><li><a href="https://redis.io/docs/data-types/lists/">lists 概述</a></li><li><a href="https://redis.io/commands/?group=list">lists 在线命令参考</a></li></ul></li><li>sets 无序集合<ul><li><code>无序的</code>，<code>元素唯一</code>的集合，类似 Java 的 HashSet </li><li>无论集合中数据量多大，元素增加/删除的<code>时间复杂度为 O(1)</code></li><li><a href="https://redis.io/docs/data-types/sets/">sets 概述</a></li><li><a href="https://redis.io/commands/?group=set">sets 在线命令参考</a></li></ul></li><li>hashes 哈希<ul><li>Redis 哈希是建模为<code>字段值对集合</code>的记录类型。因此，Redis 哈希类似于 Java HashMap。</li><li><a href="https://redis.io/docs/data-types/hashes/">hashes 概述</a></li><li><a href="https://redis.io/commands/?group=hash">hashes 在线命令参考</a></li></ul></li><li>Sorted sets 排序集合<ul><li><code>有序</code>的<code>唯一元素</code>的集合</li><li><a href="https://redis.io/docs/data-types/sorted-sets/">Sorted sets 概述</a></li><li><a href="https://redis.io/commands/?group=sorted-set">Sorted sets 在线命令参考</a></li></ul></li><li>Streams 流<ul><li>Redis 流是一种数据结构，其作用类似于<code>仅附加日志</code>(append-only log)。流有助于<code>按事件发生的顺序记录事件，然后将它们联合起来进行处理</code>。</li><li><a href="https://redis.io/docs/data-types/streams/">Streams 概述</a></li><li><a href="https://redis.io/commands/?group=stream">Streams 在线命令参考</a></li><li><a href="https://redis.io/docs/data-types/streams-tutorial/">Streams 教程</a></li></ul></li><li>Geospatial indexes 地理空间索引<ul><li>Redis 地理空间索引对于查找给定地理半径(geographic radius)或边界框内的位置很有用</li><li><a href="https://redis.io/docs/data-types/geospatial/">Geospatial indexes 概述</a></li><li><a href="https://redis.io/commands/?group=geo">Geospatial indexes 在线命令参考</a></li></ul></li><li>Bitmaps 位图<ul><li>Redis 位图有效地<code>将多个计数器编码为字符串值</code>。位图提供<code>原子</code>(atomic)获取(get)、设置(set)和递增(increment)操作，并支持不同的溢出策略。</li><li><a href="https://redis.io/docs/data-types/bitfields/">Bitmaps 概述</a></li><li><a href="https://redis.io/commands/bitfield/">Bitmaps 使用</a></li></ul></li><li>HyperLogLog 超级日志<ul><li>Redis HyperLogLog 数据结构提供了对大集合的基数（即元素的数量）的概率估计</li><li><a href="https://redis.io/docs/data-types/hyperloglogs/">HyperLogLog 概述</a></li><li><a href="https://redis.io/commands/?group=hyperloglog">HyperLogLog 在线命令参考</a></li></ul></li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>要扩展包含的数据类型提供的功能，请使用以下选项之一：</p><ul><li>在 Lua 中编写您自己的自定义<a href="https://redis.io/docs/manual/programmability/">服务器端函数</a> 。</li><li><a href="https://redis.io/docs/reference/modules/">使用模块 API</a> 编写您自己的 Redis 模块或查看 <a href="https://redis.io/docs/modules/">社区支持的模块</a> 。</li><li>使用<a href="https://redis.io/docs/stack/">Redis Stack提供的JSON、查询、时间序列</a> 和其他功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/02/28/design-pattern/"/>
      <url>/2022/02/28/design-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性，以及类的关联关系和组合关系的充分理解。</p></blockquote><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gztkl0sjsnj22360u0do4.jpg" alt="面向对象设计原则" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> DesignPattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/2022/02/24/shell/"/>
      <url>/2022/02/24/shell/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录 shell 学习小知识</p><p>Shell 是一个程序，一般都是放在<code>/bin</code>或者<code>/usr/bin</code>目录下</p></blockquote><h3 id="查看内置的-shell-解释器种类"><a href="#查看内置的-shell-解释器种类" class="headerlink" title="查看内置的 shell 解释器种类"></a>查看内置的 shell 解释器种类</h3><p>当前 Linux 系统可用的 Shell 都记录在<code>/etc/shells</code>文件中,执行 cat /etc/shells 可查看</p><pre class=" language-shell"><code class="language-shell">overdose@OverdosedeMacBook-Air shell_test % cat /etc/shells# List of acceptable shells for chpass(1).# Ftpd will not allow users to connect who are not using# one of these shells./bin/bash #/bin/csh/bin/dash/bin/ksh/bin/sh/bin/tcsh/bin/zsh</code></pre><ul><li><p>sh</p><ul><li>sh 的全称是 Bourne shell，由 AT&amp;T 公司的 Steve Bourne开发，为了纪念他，就用他的名字命名了。</li><li>sh 是 UNIX 上的标准 shell，很多 UNIX 版本都配有 sh。sh 是第一个流行的 Shell。</li></ul></li><li><p>bash</p><ul><li><p>bash shell 是 Linux 的默认 shell，本教程也基于 bash 编写。</p><p>bash 由 GNU 组织开发，保持了对 sh shell 的兼容性，是各种 Linux 发行版默认配置的 shell。</p><blockquote><p>bash 兼容 sh 意味着，针对 sh 编写的 Shell 代码可以不加修改地在 bash 中运行。</p></blockquote></li></ul></li><li><p>csh</p><ul><li>sh 之后另一个广为流传的 shell 是由柏克莱大学的 Bill Joy 设计的，这个 shell 的语法有点类似C语言，所以才得名为 C shell ，简称为 csh。</li></ul></li><li><p>tcsh</p><ul><li>tcsh 是 csh 的增强版，加入了命令补全功能，提供了更加强大的语法支持。</li></ul></li><li><p>zsh</p><ul><li>Zsh 是一种为交互式使用而设计的 shell</li></ul></li><li><p>ksh</p><ul><li><strong>KornShell</strong> ( <strong>ksh</strong>) 是一个<a href="https://en.wikipedia.org/wiki/Unix_shell">Unix shell</a>，由<a href="https://en.wikipedia.org/wiki/David_Korn_(computer_scientist)">David Korn</a>在1980 年代初期在贝尔实验室开发</li></ul></li></ul><h3 id="查看当前默认的-Shell-解释器"><a href="#查看当前默认的-Shell-解释器" class="headerlink" title="查看当前默认的 Shell 解释器"></a>查看当前默认的 Shell 解释器</h3><p>SHELL 为内置变量，在 shell 中表示默认解释器, macbook 中默认是 zsh , linux 默认是 /bin/bash</p><pre class=" language-shell"><code class="language-shell">overdose@OverdosedeMacBook-Air shell_test % echo $SHELL/bin/zsh</code></pre><h3 id="Linux-Shell命令的基本格式"><a href="#Linux-Shell命令的基本格式" class="headerlink" title="Linux Shell命令的基本格式"></a>Linux Shell命令的基本格式</h3><p>overdose@OverdosedeMacBook-Air shell_test %</p><p>overdose : 表示当前登录的用户</p><p>@ ：分隔符作用</p><p>OverdosedeMacBook-Air ： 主机名</p><p>shell_test ：用户所在的当前目录</p><h3 id="第一个-Shell-程序"><a href="#第一个-Shell-程序" class="headerlink" title="第一个 Shell 程序"></a>第一个 Shell 程序</h3><pre class=" language-shell"><code class="language-shell">#! /bin/bashvariable="HelloWorld"echo $variable</code></pre><p>保存为 <code>test.sh</code> 脚本程序</p><p>#! : 规约标记，表示指定使用哪个解释器，/bin/bash 解释器的位置（这个值的填写参考 cat /etc/shells 结果）</p><h3 id="Shell-程序的执行方式"><a href="#Shell-程序的执行方式" class="headerlink" title="Shell 程序的执行方式"></a>Shell 程序的执行方式</h3><ul><li>开启新进程运行<ul><li>给 test.sh 设置执行权限 ，chmod +x test.sh，执行 ：./test.sh</li><li>直接指定解释器，这时 #! /bin/bash 指定的解释器无效 ，执行 ：/bin/bash test.sh</li></ul></li><li>当前进程运行(./ 在 linux 中可有可无，在 macbook 得需要)<ul><li>source ./test.sh : source 命令强制读取 test.sh 中的命令一行一行执行</li><li>. ./test.sh ：点 . 跟 test.sh 之间有个空格</li></ul></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>定义变量</p><ul><li><p>不需要指定类型，只需要一个变量名，= 等号两边不能有空格</p><pre class=" language-shell"><code class="language-shell">variable=value #     无引号（当值中含有空格，tab缩进时，必须使用引号定义变量）variable='value' # 单引号variable="value" # 双引号</code></pre><p>在 /bin/bash 中默认是字符串，不管是 数字，或浮点数</p></li><li><p>命名规则</p><ul><li>变量名由数字、字母、下划线组成；</li><li>必须以字母或者下划线开头；</li><li>不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。</li></ul><pre class=" language-shell"><code class="language-shell">url=https://yuan-hy.github.io/echo $urlname='yuan'echo $nameauthor="yuan-hy"echo $author</code></pre></li></ul></li><li><p>使用变量</p><ul><li><p>使用一个定义过的变量，只要在变量名前面加美元符号<code>$</code>即可</p><pre class=" language-shell"><code class="language-shell">author="yuan-hy"echo $authorecho $&#123;author&#125;</code></pre><p>变量名外面的花括号{} 是可选的，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre><code>skill=&quot;Java&quot;echo &quot;I am good at $&#123;skill&#125;Script&quot;</code></pre><p>如果不给 skill 变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把 $skillScript 当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p><strong>推荐给所有变量加上花括号<code>&#123; &#125;</code>，这是个良好的编程习惯。</strong></p></li></ul></li><li><p>修改变量的值</p><ul><li><p>已定义的变量，可以被重新赋值，如：</p><pre class=" language-shell"><code class="language-shell">url="https://yuan-hy.github.io/"echo $&#123;url&#125;url="https://yuan-hy.github.io"echo $&#123;url&#125;</code></pre></li></ul><p>第二次对变量赋值时不能在变量名前加<code>$</code>，只有在使用变量时才能加<code>$</code>。</p></li><li><p>单引号和双引号的区别</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashurl="https://yuan-hy.github.io/"website1='个人网站：$&#123;url&#125;'website2="个人网站：$&#123;url&#125;"echo $website1echo $website2</code></pre><p>运行结果：<br>C语言中文网：${url}<br>C语言中文网：<a href="https://yuan-hy.github.io/">https://yuan-hy.github.io/</a></p><p>以单引号<code>&#39; &#39;</code>包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。这种方式比较适合定义显示纯字符串的情况，即不希望解析变量、命令等的场景。</p><p>以双引号<code>&quot; &quot;</code>包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。这种方式比较适合字符串中附带有变量和命令并且想将其解析后再输出的变量定义。</p><p><strong>建议：如果变量的内容是数字，那么可以不加引号；如果真的需要原样输出就加单引号；其他没有特别要求的字符串等最好都加上双引号，定义变量时加双引号是最常见的使用场景。</strong></p></li><li><p>将命令的结果赋值给变量</p></li></ul><p>​            Shell 也支持将命令的执行结果赋值给变量，常见的有以下两种方式：</p><p>​            variable=<code>command</code><br>​            variable=$(command)</p><p>​            第一种方式把命令用反引号（位于 Esc 键的下方）包围起来，反引号和单引号非常相似，容易产生混淆，所以不推荐使用这种方            式；</p><p>​            第二种方式把命令用<code>$()</code>包围起来，区分更加明显，所以推荐使用这种方式。</p><p>​            例如，我在 demo 目录中创建了一个名为 log.txt 的文本文件，用来记录我的日常工作。下面的代码中，使用 cat 命令将 log.txt             的内容读取出来，并赋值给一个变量，然后使用 echo 命令输出。</p><pre class=" language-shell"><code class="language-shell">    [overdose@OverdosedeMacBook-Air ~]$ cd demo    [overdose@OverdosedeMacBook-Air demo]$ log=$(cat log.txt)    [overdose@OverdosedeMacBook-Air demo]$ echo $log    yuan-hy 个人网站地址：https://yuan-hy.github.io/    [overdose@OverdosedeMacBook-Air demo]$ log=`cat log.txt`    [overdose@OverdosedeMacBook-Air demo]$ echo $log    yuan-hy 个人网站地址：https://yuan-hy.github.io/</code></pre><ul><li>只读变量</li></ul><p>使用 <strong>readonly</strong> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><p>下面的例子尝试更改只读变量，结果报错：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashmyUrl="https://yuan-hy.github.io/"readonly myUrlmyUrl="https://yuan-hy.github.io/"</code></pre><p>运行脚本，结果如下：</p><pre><code>bash: myUrl: This variable is read only.</code></pre><ul><li>删除变量</li></ul><p>使用 <strong>unset</strong> 命令可以删除变量。语法：</p><pre class=" language-shell"><code class="language-shell">unset variable_name</code></pre><p>变量被删除后不能再次使用；unset 命令不能删除只读变量。</p><p>举个例子：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashmyUrl="https://yuan-hy.github.io/"unset myUrlecho $myUrl</code></pre><p>上面的脚本没有任何输出。</p><ul><li><p>变量的作用域</p><p><a href="http://c.biancheng.net/view/773.html">参考链接</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令积累</title>
      <link href="/2022/01/30/linuxcommand/"/>
      <url>/2022/01/30/linuxcommand/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录 linux 命令小知识</p></blockquote><h3 id="alias-与-unalias"><a href="#alias-与-unalias" class="headerlink" title="alias 与 unalias"></a>alias 与 unalias</h3><p>背景 ：当命令很长的时候，可以通过自定义别名来减少输入，节省时间，也可以通过定制命令防止出现操作不当</p><ul><li><p>查看当前系统存在的别名</p><pre class=" language-shell"><code class="language-shell">overdose@OverdosedeMacBook-Air ~ % aliasrun-help=manwhich-command=whence</code></pre></li><li><p>为 clear 设置 cl 别名,设置别名后，查看 alias ，可以看到已设置别名成功</p><pre class=" language-shell"><code class="language-shell">overdose@OverdosedeMacBook-Air ~ % alias cl='clear'overdose@OverdosedeMacBook-Air ~ % aliascl=clearrun-help=manwhich-command=whence</code></pre></li><li><p>取消设置别名 cl,执行取消设置别名后，查看 alias ，可以看到已取消设置别名成功</p><pre class=" language-shell"><code class="language-shell">overdose@OverdosedeMacBook-Air ~ % unalias cloverdose@OverdosedeMacBook-Air ~ % aliasrun-help=manwhich-command=whenceoverdose@OverdosedeMacBook-Air ~ % </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 虚拟机小知识</title>
      <link href="/2022/01/23/jvm/"/>
      <url>/2022/01/23/jvm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于阅读 Oracle 官方文档对 JVM 规范的知识积累</p></blockquote><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul><li><p>Java 虚拟机(简称 <strong>JVM</strong>)是 Java 平台的基石。它是该技术的组成部分，独立于硬件和操作系统、具有轻量编译代码以及保护用户免受恶意程序侵害的能力。</p></li><li><p>Java 虚拟机对 Java 编程语言一无所知，只知道一种特定的二进制格式，即<code>class</code>文件格式。<code>class</code>文件包含 Java 虚拟机指令（或<em>字节码</em>）和符号表，以及其他辅助信息。</p></li><li><p>为了安全起见，Java 虚拟机在 <code>class</code> 文件上的代码强加强大的句法和结构约束。但是，任何具有可以用有效<code>class</code>文件表示的功能的语言都可以由 Java 虚拟机托管(通俗来讲就是一门语言，如果编译后为有效的 <code>class</code> 文件,都可以被 JVM 识别，在 JVM 上运行，例如 groovy 语言)</p></li></ul><h2 id="Java-虚拟机架构"><a href="#Java-虚拟机架构" class="headerlink" title="Java 虚拟机架构"></a>Java 虚拟机架构</h2><p>要正确实现 Java 虚拟机，您只需要能够读取<code>class</code>文件格式并正确执行其中指定的操作即可。不属于 Java 虚拟机规范的实现细节会不必要地限制实现者的创造力。例如，运行时数据区域(<code>run-time data areas</code>)的内存布局、使用的垃圾收集算法(<code>garbage-collection algorithm</code>)以及 Java 虚拟机指令的任何内部优化（例如，将它们转换为机器代码）都由实现者自行决定。</p><h3 id="class-文件格式"><a href="#class-文件格式" class="headerlink" title="class 文件格式"></a>class 文件格式</h3><ul><li>是一种二进制格式的编译后的代码，独立于硬件和操作系统，可由 Java 虚拟机执行，通常（但不一定）存储在文件中，称为<code>class</code>文件格式(如：Simple.class)。文件格式精确地定义了类或接口的<code>class</code>表示，包括诸如字节顺序之类的细节</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Share</title>
      <link href="/2022/01/22/share/"/>
      <url>/2022/01/22/share/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章主要的目的是建立好文链接，将所遇见的好文章收录，方便知识集中</p></blockquote><h3 id="那些年搞不懂的高深术语——依赖倒置•控制反转•依赖注入•面向接口编程"><a href="#那些年搞不懂的高深术语——依赖倒置•控制反转•依赖注入•面向接口编程" class="headerlink" title="那些年搞不懂的高深术语——依赖倒置•控制反转•依赖注入•面向接口编程 "></a><a href="https://www.cnblogs.com/aoyeyuyan/p/5495219.html">那些年搞不懂的高深术语——依赖倒置•控制反转•依赖注入•面向接口编程 </a></h3><ul><li>通俗易懂的语言解释内聚、耦合、耦合度等抽象的高深术语，很值得去学习这种文章写法</li><li>在代码中追求高内聚，低耦合。</li></ul><h3 id="C语言编程学习网站"><a href="#C语言编程学习网站" class="headerlink" title="C语言编程学习网站"></a><a href="http://c.biancheng.net/cpp/">C语言编程学习网站</a></h3><ul><li>该网站可以了解到编程更本质的知识点，有种醍醐灌顶的感觉</li></ul>]]></content>
      
      
      <categories>
          
          <category> Share </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Share </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 访问控制修饰符</title>
      <link href="/2022/01/22/javamodifiers/"/>
      <url>/2022/01/22/javamodifiers/</url>
      
        <content type="html"><![CDATA[<blockquote><p>顾名思义，访问控制修饰符就是在面向对象编程过程中，通过使用访问控制修饰符来限制对对象私有属性的访问，可防止对封装数据的未授权访问，有助于保证数据完整性，以达到封装的效果</p></blockquote><h2 id="访问控制修饰符种类"><a href="#访问控制修饰符种类" class="headerlink" title="访问控制修饰符种类"></a>访问控制修饰符种类</h2><ul><li>常见的访问控制修饰符 <strong><code>public</code><strong>、</strong><code>protected</code><strong>、</strong><code>default</code><strong>、</strong><code>private</code></strong></li></ul><h2 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h2><p>  了解各个修饰符的作用域有利于在实际编程中更好的根据具体场景给属性方法添加对应的修饰符，合理地使用访问控制符，可以通过降低类和类之间的耦合性（关联性）来降低整个项目的复杂度，也便于整个项目的开发和维护</p><table><thead><tr><th>访问范围</th><th>private</th><th>default(默认)</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>同一个类</td><td>可访问</td><td>可访问</td><td>可访问</td><td>可访问</td></tr><tr><td>同一包中的其他类</td><td>不可访问</td><td>可访问</td><td>可访问</td><td>可访问</td></tr><tr><td>不同包中的子类</td><td>不可访问</td><td>不可访问</td><td>可访问</td><td>可访问</td></tr><tr><td>不同包中的非子类</td><td>不可访问</td><td>不可访问</td><td>不可访问</td><td>可访问</td></tr></tbody></table><h2 id="各个修饰符的说明"><a href="#各个修饰符的说明" class="headerlink" title="各个修饰符的说明"></a>各个修饰符的说明</h2><h3 id="1-private"><a href="#1-private" class="headerlink" title="1. private"></a>1. private</h3><p><strong>用 private 修饰的类成员，只能被该类自身的方法访问和修改，而不能被任何其他类（包括该类的子类，注意就算是子类也不能访问，在继承那里可以明显感受到这个特性）访问和引用</strong>。因此，private 修饰符具有最高的保护级别。例如，设 PhoneCard 是电话卡类，电话卡都有密码，因此该类有一个密码域，可以把该类的密码域声明为私有成员。</p><h3 id="2-default（默认）"><a href="#2-default（默认）" class="headerlink" title="2. default（默认）"></a>2. default（默认）</h3><p>如果一个类没有访问控制符，说明它具有默认的访问控制特性。<strong>这种默认的访问控制权规定，该类只能被同一个包中的类访问和引用，而不能被其他包中的类使用，<code>即使其他包中有该类的子类</code>。这种访问特性又称为包访问性（package private）</strong>。</p><p>同样，类内的成员如果没有访问控制符，也说明它们具有包访问性，或称为友元（friend）。定义在同一个文件夹中的所有类属于一个包，所以前面的程序要把用户自定义的类放在同一个文件夹中（Java 项目默认的包），以便不加修饰符也能运行。</p><h3 id="3-protected"><a href="#3-protected" class="headerlink" title="3. protected"></a>3. protected</h3><p>用保护访问控制符 protected 修饰的类成员可以被三种类所访问：<strong>该类自身</strong>、<strong>与它在同一个包中的其他类</strong>以及<strong>在其他包中的该类的子类</strong>。使用 protected 修饰符的主要作用，是允许其他包中它的子类来访问父类的特定属性和方法，否则可以使用默认访问控制符。</p><h3 id="4-public"><a href="#4-public" class="headerlink" title="4. public"></a>4. public</h3><p>当一个类被声明为 public 时，它就具有了被其他包中的类访问的可能性，只要包中的其他类在程序中使用 import 语句引入 public 类，就可以访问和引用这个类。</p><p>类中被设定为 public 的方法是这个类对外的接口部分，避免了程序的其他部分直接去操作类内的数据，实际就是数据封装思想的体现。每个 Java 程序的主类都必须是 public 类，也是基于相同的原因。</p><h2 id="修饰符在继承中的使用例子"><a href="#修饰符在继承中的使用例子" class="headerlink" title="修饰符在继承中的使用例子"></a>修饰符在继承中的使用例子</h2><ul><li><p>测试 private 修饰的属性和方法（其他的修饰符测试过程一样，同样验证上面的作用范围是符合的）</p><p>Father Class 如下：</p><pre class=" language-jsp"><code class="language-jsp">public class FatherClass &#123;  private String name;    private void setName(String name)&#123;            this.name = name    &#125;&#125;</code></pre><p>Son Class 如下：</p><pre class=" language-jsp"><code class="language-jsp">public class SonClass extends FatherClass&#123;&#125;</code></pre><p>同个包下的测试类 MainTest 如下：</p><pre class=" language-shell"><code class="language-shell">public class MainTest &#123;    public static void main(String[] args) &#123;                    FatherClass fatherClass = new FatherClass();                        SonClass sonClass = new SonClass();                        //fatherClass.                        //sonClass.    &#125;&#125;</code></pre><ul><li><p>测试分析：</p><p>​    在 MainTest 分别 FatherClass 和 SonClass 的对象，通过 fatherClass.或者 sonClass. (对象引用. ) 获取 name 属性和 setName 方法,都是不可用的</p></li><li><p>测试结果 ：</p><p>​    用 private 修饰的类成员，只能被该类自身的方法访问和修改，而不能被任何其他类（包括该类的子类）访问和引用</p></li></ul></li><li><p>测试在继承关系中代码执行顺序</p><ul><li>目的：在面试中可能会被问到代码执行顺序</li></ul><p>Father Class 如下：</p><pre class=" language-jsp"><code class="language-jsp">package com.example.springbootdemo.spec;public class FatherClass &#123;    //父类构造器    public FatherClass() &#123;        System.out.println("Father Construct");    &#125;    //父类静态代码块    static &#123;        System.out.println("Father static block");    &#125;    //父类成员代码块    &#123;        System.out.println("Father instance block");    &#125;&#125;</code></pre><p>Son Class 如下：</p><pre class=" language-jsp"><code class="language-jsp">package com.example.springbootdemo.spec;public class SonClass extends FatherClass&#123;    //子类构造器    public SonClass() &#123;        System.out.println("Son Construct");    &#125;        //子类静态代码块    static &#123;        System.out.println("Son static block");    &#125;        //子类成员代码块    &#123;        System.out.println("Son instance block");    &#125;&#125;</code></pre><p>同个包下的测试类 MainTest 如下：</p><pre class=" language-jsp"><code class="language-jsp">package com.example.springbootdemo.spec;public class MainTest &#123;    public static void main(String[] args) &#123;        System.out.println("实例化子类");        SonClass sonClass = new SonClass();        System.out.println("实例化父类");        FatherClass fatherClass = new FatherClass();        System.out.println("实例化子类");        SonClass sonClass1 = new SonClass();    &#125;&#125;</code></pre><p>测试输出结果：</p><pre class=" language-shell"><code class="language-shell">Father static blockSon static blockFather instance blockFather ConstructSon instance blockSon Construct实例化父类Father instance blockFather Construct实例化子类Father instance blockFather ConstructSon instance blockSon Construct</code></pre><ul><li><p>测试分析：</p><p>​    分析前先说以下几个默认前提</p><p>​        1、静态代码块：用 staitc 声明，jvm 加载类时执行，仅执行一次<br>​        2、构造代码块：类中直接用{}定义，<strong>每一次</strong>创建对象时执行。<br>​        3、执行顺序优先级：静态块,main(),构造代码块,构造方法。</p><p>​        4、以上均为不带参数构造器，在调用子类构造器时，会默认使用 super 调用父类构造器</p></li></ul><p>​                程序运行时，此时会因为继承关系会先加载 FatherClass 类，因此看到先输出父类静态代码块打印，接着是子类静态代码块。new SonClass() 分配内存，创建对象，因为会默认先调用父类创建对象，所以会看到先输出父类的构造代码块输出和构造器输出，接着就是子类的。第二次直接创建父类对象时，不会再看到静态代码部分输出，因为静态代码块仅执行一次。第三次创建子类对象时，子类的静态代码块也不执行。</p><ul><li><p>测试结果：</p><p>​    创建子类对象时执行顺序：</p><p>​        父类静态代码块 <strong>&gt;</strong> 子类静态代码块 <strong>&gt;</strong> 父类构造代码块 <strong>&gt;</strong> 父类构造器 <strong>&gt;</strong> 子类构造代码块 <strong>&gt;</strong> 子类构造器</p></li></ul></li><li><p>关于更多的代码执行顺序以及深层原因，可参考<a href="https://www.1024sou.com/article/38293.html">【Java】各种代码块的执行顺序</a></p><ul><li><p>基本顺序 ：<code>静态 &gt; main 函数 &gt; 构造代码块 &gt; 构造函数</code> （只需要理解记住该顺序，可根据不同的情况扩展不同的顺序）</p><ul><li><p>当一个类的时候，假设都含有静态成员变量和成员变量时</p><p>静态成员 &gt; 静态代码块 &gt; main 函数 &gt; 成员变量 &gt; 构造代码块 &gt; 构造函数</p></li><li><p>当有继承关系的时候，假设都含有静态成员变量和成员变量时</p><p>父类静态成员 &gt; 父类静态代码块 &gt; 子类静态成员 &gt; 子类静态代码块 &gt; main 函数 &gt; 父类成员变量 &gt; 父类构造代码块 &gt; 父类构造函数 &gt; 子类成员变量 &gt; 子类构造代码块 &gt; 构造函数</p></li><li><p>当父类也有自己的父类时，假设都含有静态成员变量和成员变量时（不管有多少个父类，都是嵌套的）</p><p>父类 B 的父类静态成员 &gt; 父类 B 的父类静态代码块 &gt; 父类 B 静态成员 &gt; 父类 B 静态代码块 &gt; 子类静态成员 &gt; 子类静态代码块 &gt; main 函数 &gt; 父类 B 的父类成员变量 &gt; 父类 B 的父类构造代码块 &gt; 父类 B 的父类构造函数 &gt; 父类成员变量 &gt; 父类构造代码块 &gt; 父类构造函数 &gt; 子类成员变量 &gt; 子类构造代码块 &gt; 构造函数</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/11/hello-world/"/>
      <url>/2022/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
